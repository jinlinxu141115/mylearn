2019.11.9 数据库 第4天

查询 自己学习,(嵌套查询,多表查询,连接查询)..

一.用户授权 : 在数据库服务器上添加新的连接新用户并设置和密码.

为什么授权: 1.其它机器,无法连接上来.root 也不行.
            2.本地机子,必须是root才能登入.换其它用户也不行.

1.1 grant授权
    授权：添加用户并设置权限
    命令格式：
     --grant 权限列表  on 库名 to 用户名@“客户端地址”
       identified by “密码” //授权用户密码
       with grant option；  //有授权权限，可选项

mysql>grant all  on *。*   to  mysdba@“%” 
           identified by  “123456” with grant option；
1.2权限列表
 --all     // 所有权限
--usage    //无权限
--select，update，insert    //个别权限
--select，update（字段1，字段2，字段N）

1.3库名
-*，*     //所有库所有表
--库名.*   //一个表
--库名.表名     //一张表

1.4 用户名
--授权时自定义，要有标识性
--储存在mysql库的user表里

1.5客户端地址
--%     // 所有主机
--192.168.4.%    //  网段内的所有主机
--92.168.4.1      // 一台主机
---localhost       // 数据库服务器本机
1.6登入用户相关命令
 a ）
mysql> select user();    //显示登入用户名及客户端地址
+-------------------+
| user()            |
+-------------------+
| yaya@192.168.4.51 |
+-------------------+

b）
mysql>show grants;   //显示自身访问权限
+-----------------------------------------------+
| Grants for yaya@%                             |
+-----------------------------------------------+
| GRANT USAGE ON *.* TO 'yaya'@'%'              |
| GRANT ALL PRIVILEGES ON `db4`.* TO 'yaya'@'%' |
+-----------------------------------------------+
2 rows in set (0.00 sec
c）

mysql> select @@hostname;   //显示登入数据库服务器当主机名

mysql> select @@hostname;
+------------+
| @@hostname |
+------------+
| host50     |
+------------+

d）
mysql> show grants;  查看root权限
+---------------------------------------------------------------------+
| Grants for root@localhost                                           |
+---------------------------------------------------------------------+
| GRANT ALL PRIVILEGES ON *.* TO 'root'@'localhost' WITH GRANT OPTION |
| GRANT PROXY ON ''@'' TO 'root'@'localhost' WITH GRANT OPTION        |
+---------------------------------------------------------------------+

GRANT PROXY ON ''@'' TO '   proxy权限可以把自己的权限复制给别人.
f）
show grants for             管理员查看已有授权用户的权限
用户名@“客户端地址”
e）
set  password =
password（“密码”）     // 授权用户连接后修改连接密码
g）

set password for
用户名@“客户端地址” =
password（"密码”）            管理员重新设置用户连接密码
mysql> drop user  用户名@“客户端地址”  只要管理员才有权限删除,授权用户信息.
=====================================================
2.授权库

---mysql库 记录授权信息，主要如下：

 --user表  记录已有的授权用户及权限
--db表 记录已有授权哦用户对数据库的访问权限
--tables_priv   记录已有授权用户对表当访问权限
--columns_priv  记录已有授权用户对字段当访问权限

ysql> select Host,user from user; 进入到mysql库里 查看数据库服务器已经有授权用户
+-------------+-----------+
| Host        | user      |
+-------------+-----------+
| %           | mydba     |
| %           | xu        |
| %           | yaya      |
| 192.168.4.% | admin     |
| localhost   | admin2    |
| localhost   | mysql.sys |
| localhost   | root      |
| localhost   | u2        |
+-------------+-----------+
8 rows in set (0.00 sec)

mysql> show grants for mydba@"%";   查看权限
+--------------------------------------------------------------+
| Grants for mydba@%                                           |
+--------------------------------------------------------------+
| GRANT ALL PRIVILEGES ON *.* TO 'mydba'@'%' WITH GRANT OPTION |
+--------------------------------------------------------------+
1 row in set (0.00 sec)

mysql> 



------------------------------------------------------------------------------------------------------------------
mysql> select host , db ,user from db;
+-----------+-----+-----------+
| host      | db  | user      |
+-----------+-----+-----------+
| %         | db4 | yaya      |
| %         | db5 | xu        |
| localhost | db3 | admin2    |
| localhost | sys | mysql.sys |
+-----------+-----+-----------+
mysql> select * from db where user="admin2"\G;
*************************** 1. row ***************************
                 Host: localhost
                   Db: db3
                 User: admin2
          Select_priv: Y
          Insert_priv: Y
          Update_priv: Y
          Delete_priv: Y
          Create_priv: Y
            Drop_priv: Y
           Grant_priv: N
      References_priv: Y
           Index_priv: Y
           Alter_priv: Y
Create_tmp_table_priv: Y
     Lock_tables_priv: Y
     Create_view_priv: Y
       Show_view_priv: Y
  Create_routine_priv: Y
   Alter_routine_priv: Y
         Execute_priv: Y
           Event_priv: Y
         Trigger_priv: Y
1 row in set (0.00 sec)

ERROR: 
No query specified



12.撤销权限 :
命令个数

mysql>  revoke   权限列表  on  库名.表  from
用户名@“客户端地址”；
mysql>show grants for mydba@"%"; 查看mydba权限.
mysql>revoke grant option on *.* from mydba@"%"; 命令撤销 他授权权限.
mysql>show grants for mydba@"%"; 查看mydba权限.
mysql>revoke all on *.* from mydba@"%";撤销他目前有的全部权限.
mysql> drop user mydba@"%"; 命令删除mydba用户的授权.
mysql> select user,host from user where user="mydba"\G; 查看用户表里,就没有这个mydba用户信息 了.


15 .手握root系统的人可以随时修改你数据库的密码.


[root@host50 ~]# systemctl stop mysqld;
[root@host50 ~]# vim /etc/my.cnf
skip-grant-tables
:wq
[root@host50 ~]# systemctl start mysqld
[root@host50 ~]# mysql
mysql> update mysql.user set authentication_string=password("123qqq...A")
    -> where
    -> user="root" and host="localhost"; //设置新密码为123qqq...A
mysql> flush privileges;             //刷新授权表

Query OK, 0 rows affected (0.00 sec)

mysql> quit

[root@host50 ~]# vim /etc/my.cnf
#skip-grant-tables                 把跳过策略注释掉
:wq

[root@host50 ~]# systemctl restart mysqld

或者知道老密码
[root@host50 ~]#mysqladmin -uroot -p password"新密码" 
=================================================
修改管理员root密码的其他方法

1）方法1，以root登入mysql> 后，使用SET PASSWORD指令设置

这个与新安装MySQL-server后首次修改密码时要求的方式相同，平时也可以用：
 mysql> SET PASSWORD FOR root@localhost=PASSWORD('1234567');
    
2）方法2，以root登入mysql> 后，使用GRANT授权工具设置
这个是最常见的用户授权方式（下一节会做更多授权的练习）：
mysql> GRANT all ON *.* TO root@localhost IDENTIFIED BY '1234567';
    
3）方法3，以root登入mysql> 后，使用UPDATE更新相应的表记录
这种方法与恢复密码时的操作相同：
mysql> UPDATE mysql.user SET authentication_string=PASSWORD('1234567')
        -> WHERE user='root' AND host='localhost';          //重设root的密码
 mysql> FLUSH PRIVILEGES;                                  //刷新授权表

在上述方法中，需要特别注意：当MySQL服务程序以 skip-grant-tables 选项启动时，如果未执行“FLUSH PRIVILEGES;”操作，是无法通过SET PASSWORD或者GRANT方式来设置密码的。比如，验证这两种方式时，都会看到ERROR 1290的出错提示：  
    mysql> SET PASSWORD FOR root@localhost=PASSWORD('1234567');
    ERROR 1290 (HY000): The MySQL server is running with the --skip-grant-tables option so it cannot execute this statement
    mysql> GRANT all ON *.* TO root@localhost IDENTIFIED BY '1234567';
    ERROR 1290 (HY000): The MySQL server is running with the --skip-grant-tables option so it cannot execute this statement
==============================================
16.逻辑备份与恢复  : 使用命令(可以使用mysql服务自带的命令.或者安装其它软件.

完全备份:备份所有数据,一台服务器上的数据.或者(某一个库的全部数据,或者一张表).看具体对象.

增量备份::把新产生的数据都备份.备份上次备份后.

差异备份:把新产生的数据都备份.和完全备份进行比较.

mysqdump 缺陷:  
    a)备份和恢复数据时,会给表加写锁 (把表给锁上) .当在备份和恢复的时候,别人不能在写,插入数据,更新的操作.线上服务用户无法访问这个服务.适合小数据量.
     b)新产生的数据无法恢复.这次备份到下次备份中间的全部新数据无法恢复.


例如
周一备份所有数据(全部数据库),周二到周天每天备份(进行差异备份,每次被周一的比,新的当天备份)

周一备份所有数据(全部数据库),周二到周天每天备份(进行增量备份,每次和上一天的比,新的当天备份)
完全备份命令mysqldump  -uroot -p密码 库名 > 目录/xxx.sql

50 ]# mysqldump -uroot -p123456  -A  > /mybak/allbak.sql
50 ]# scp  /mybak/allbak.sql  root@192.168.4.51:/tmp/

51]# mysql> drop  database db1; drop database db2;
     mysql> drop  database db3 ; drop database mysql;

51]# mysql -uroot -p密码  < /tmp/allbak.sql
     mysql> show databases;

]# mysqldump  -uroot  -p密码  库名 >  目录/xxx.sql
备份所有数据 ：
	1台服务器           -A 、--all-databases
	1个库               mysql
	1张表		    db3 user
	多个库              -B  库名1  库名2 

]# mysql   -uroot  -p密码  库名 < 目录/xxx.sql

----------------------------------------------------------------------------------------------------------------------
17.增量备份
     17.1  binlog日志的使用实时增量备份.
a)什么是binlog日志?
     
    binlog也称二进制日志(不是文本),mysql服务日志文件的一种,记录查询(select,show,desc)之外的所有sql命令(create,insert,alter ,delete等),可用数据备份和恢复(再执行一下记录的sql命令来恢复数据),配置mysql主从同步的必要条件.

b)启用binlog日志(默认,mysql不启动)

    server_id=数字  指定id值(1-255)

    vim /etc/my.cnf
[mysqld]
log_bin
server_id=100

C)查看是否启动
  
   方法1)ls //var/lib/mysql/host50*
//var/lib/mysql/host50-bin.000001 (第一个文件,如果日志储存满了.会自动00002文件)  //var/lib/mysql/host50-bin.index(日志索引文件,文本的当前目前已经有的日志文件,) 
   方法1)管理员root登入mysql,用命令 show master status;//查看日志信息

+-------------------+----------+--------------+------------------+-------------------+
| File              | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |
+-------------------+----------+--------------+------------------+-------------------+
| host50-bin.000001 |      154 |              |                  |                   |
+-------------------+----------+--------------+------------------+-------------------+
1 row in set (0.00 sec)
mysql> insert into user(name,uid) values("joha",1088);
Query OK, 1 row affected (0.04 sec)
mysql> show master status;//查看日志信息
+-------------------+----------+--------------+------------------+-------------------+
| File              | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |
+-------------------+----------+--------------+------------------+-------------------+
| host50-bin.000001 |      433 |              |                  |                   |
+-------------------+----------+--------------

编号,433-154是记录进入joha的记录.


positin :偏移量:每记录一个日志,偏移量起始是154,每个操作,每个insert都会记录相应的位置.
           
d) 手动生成新的日志文件:为什么要生成,主要是为了单独记录的特定操作,记录相应的特定记录备份.
   方法1)systemctl restart mysqld
   方法2)mysql>flush logs;
          或 mysql -uroot -p密码 -e 'flush log'
     方法3)mysqldump --flush-log;
     案例1 :sqldump -uroot -p123456 db3 --flush-logs  > /root/db3aa.sql 会产生db3的日志文件.备份每个数据库,会备份每一个数据生成一个备份文件.

     案例2:mysql> flush logs;
mysql> show master status;
+-------------------+----------+--------------+------------------+-------------------+
| File              | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |
+-------------------+----------+--------------+------------------+-------------------+
| host50-bin.000002 |      154 |              |                  |                   |
+-------------------+----------+--------------+------------------+----------


e)命令行在shell和mysql 相互转换:

      案例1 :  msyql命令下使用shell系统命令
       mysql> system ls /root
      案例2:  shell命令下使用mysql命令
    [root@host50 ~]# mysql -uroot -p123456 -e 'show databases'

   

f)清理日志的方法:
  删除指定编号前的binlog日志文件
    --mysql> purge master logs to  "binlog文件名"  
案例: mysql>purge master logs to "host50-bin.000005"; 删除前5的日志

   删除所有binlog日志,重新建新日志:

     案例 :mysql>reset master; 把之前全部日志删除.系统会从新一个新的000001日志.

g)自定义日志 文件存储目录和名字
#mkdir /mylog                //创建文件不能在root下,因为没有权限进入root家目录
#chown mysql /mylog
#vim /etc/my.cnf
[mysqld]
log_bin=/mylog/db50     //自定义目录到db50,为日志文件名 后期创建日志db50.000002
:wq
#systemctl restart mysqld
[root@host50 mysql]# ls /mylog/
db50.000001  db50.index

h) 修改日志记录的格式
  
   mysql> show variables like "binlog_format";  //查看当前日志记录格式
+---------------+-------+
| Variable_name | Value |
+---------------+-------+
| binlog_format | ROW   |
+---------------+-------+
1 row in set (0.00 sec)
日志三种方式
a)statement   报表模式
c)row         行模式
d)mixed       混合模式.
update db4.user set pass
update
# vim  /etc/my.cnf
binlog_format="mixd"        //修改当前日志的记录方式为混合模式
wq
#systemctl restart mysqld
#mysql -uroot -p123456
#mysql> show variables like "binlog_format";  查看日志记录格式
+---------------+-------+
| Variable_name | Value |
+---------------+-------+
| binlog_format | MIXED |
+---------------+-------+

 mysql> show master status;   查看日志记录的文件
+-------------+----------+--------------+------------------+-------------------+
| File        | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |
+-------------+----------+--------------+------------------+-------------------+
| db50.000002 |      154 |              |                  |                   |
+-------------+----------+--------------+------------------+----------------
查看日志内容

案例.写入新数据:
mysql> insert into db3.user(name,uid) values("hahaa" ,99);
Query OK, 1 row affected (0.08 sec)
mysql> insert into db3.user(name,uid) values("hahab" ,98);
Query OK, 1 row affected (0.04 sec)
mysql> insert into db3.user(name,uid) values("hahac" ,97);
Query OK, 1 row affected (0.04 sec)
[root@host50 mysql]# mysqlbinlog /mylog/db50.000002  | grep -i insert 查看日志信息
SET INSERT_ID=23/*!*/;
insert into db3.user(name,uid) values("hahaa" ,99)
SET INSERT_ID=24/*!*/;
insert into db3.user(name,uid) values("hahab" ,98)
SET INSERT_ID=25/*!*/;
insert into db3.user(name,uid) values("hahac" ,97)


I)使用binlog日志恢复数据
恢复数据
..使用mysqlbinlog 提取历史sql操作
---通过管道交给mysql 命令执行
命令格式 
  --mysqlbinlog [选项]日志文件 | mysql -uroot -p密码

--start-datetime="yyyy-mm-dd hh:mm:ss"　　　//起始时间
--stop-datetime="yyyy-mm-dd hh:mm:ss"　　　//结束时间
--start-position=数字　　　　　　　　//起始偏移量　　　　　　　
--stop-position=数字　　　　　　　　//结束偏移量


恢复数据案例一:
把mysqlbinlog日志从头到尾部执行一遍
------------------------------------------------------------------------------------------------
#mysqlbinlog binlog日志  

1)mysql> reset master;
Query OK, 0 rows affected (0.09 sec)
2)[root@host50 ~]# mysqldump -uroot -p123456 db3 user > /root/db3_user.sql
备份db3日志
3)进入数据db3
mysql> insert into db3.user(name,uid) values("lei01" ,88);
Query OK, 1 row affected (0.09 sec)
进入数据库新添加三个记录
mysql> insert into db3.user(name,uid) values("lei02" ,87);
Query OK, 1 row affected (0.03 sec)

mysql> insert into db3.user(name,uid) values("lei02" ,86);
Query OK, 1 row affected (0.04 sec)
mysql> select count(*) from db3.user;
+----------+
| count(*) |
+----------+
|       28 |
+----------+

4)然后到另外一台服务器上,删除db3.上的user表
mysql> delete from db3.user;
Query OK, 21 rows affected (0.03 sec)

5) 把50机上的 完全备份和日志增量备份传给51机子
[root@host50 ~]# scp /root/db3_user.sql  root@192.168.4.51:/opt/
root@192.168.4.51's password: 
db3_user.sql                                  100% 3509     6.2MB/s   00:00    
[root@host50 ~]# scp /mylog/db50.000001  root@192.168.4.51:/opt/


6)[root@host51 ~]# mysql -uroot -p123456 db3 < /opt/db3_user.sql 把完全备份还原.

[root@host51 ~]# mysqlbinlog  /opt/db50.000001 | mysql -uroot -p123456 把
mysql> select count(*) from user;
+----------+
| count(*) |
+----------+
|       28 |
+----------+
=======================================================
日志的增量备份还原.

案例二:  mysqbinlog日志文件,只执行一部分.abc插入的记录.
重点 :
COMMIT/*!*/; #这个是数据里,最后一个命令的回车按键偏移量.必须得把他包含在里面,才能执行
# at 1443 
-----------------------------------------------------------------------------------------------------------------------------
增量备份
1)在50服务器添加新记录
mysql> insert into db3.user(name,uid,gid)  values("A",101,101);
Query OK, 1 row affected (0.05 sec)

mysql> insert into db3.user(name,uid,gid)  values("B",102,102);
Query OK, 1 row affected (0.04 sec)

mysql> insert into db3.user(name,uid,gid)  values("C",103,103);
Query OK, 1 row affected (0.05 sec)

mysql> delete from db3.user where name="A";
Query OK, 1 row affected (0.04 sec)

mysql> delete from db3.user where name in ("B","C");
Query OK, 2 rows affected (0.06 sec)

2)在51服务器上,把
[root@host50 ~]#scp /mylog/db50.000001  root@192.168.4.51:/opt/

3)查看binlog日志:

# at 1288
#191111 14:06:14 server id 50  end_log_pos 1288 CRC32 0xc28b0434 	Intvar
SET INSERT_ID=29/*!*/;
#191111 14:06:14 server id 50  end_log_pos 1412 CRC32 0x17d05388 	Query	thread_id=6	exec_time=0	error_code=0
SET TIMESTAMP=1573452374/*!*/;
insert into db3.user(name,uid,gid)  values("A",101,101)
/*!*/;
# at 1412
#191111 14:06:14 server id 50  end_log_pos 1443 CRC32 0xe5a94811 	Xid = 46
##    at 1288 到 at 1412 偏移量是执行insert into db3.user(name,uid,gid)  values("A",101,101).但是没有执行.

COMMIT/*!*/;          ##这个是数据里,最后一个命令的回车按键偏移量.必须得把他包含在里面,才能执行
# at 1443

5)在51执行日志恢复,看到数据库里有ABC. 查看日志,A B C 插入的偏移日志,A的开始日志到C的结束日志,下面COMMIT 下面也必须在里面. at便宜量  是 1288 到 2095.

[root@host51 opt]# mysqlbinlog  --start-position=1288  --stop-position=2095  /opt/db50.000001 | mysql -uroot -p123456
[root@host51 opt]# mysql -uroot -p123456 -e 'select * from db3.user'

| 29 | A               | NULL     |  101 |  101 | NULL                                                            | NULL            | NULL           |
| 30 | B               | NULL     |  102 |  102 | NULL                                                            | NULL            | NULL           |
| 31 | C               | NULL     |  103 |  103 | NULL                                                            | NULL            | NULL           |
+----+-----------------+----------+------+------+-----------------------
##
偏移量 2095 到 2160 是操作

=========================================
物理备份及恢复

备份操作 
-- cp -r /var/lib/myssql    备份目录/mysql.bak
--tar -zcvf /root/mysql.tar.gz /var/lib/mysql/*

恢复操作

-cp -r 备份目录/mysql.bak  /var/lib/mysql/
-tar -zxvf /root/mysql.tar.gz  -C /var/lib/mysql/
-chown -R mysql:mysql /var/lib/mysql


案例操作: 同步51mysql和50一样数据库数据

host50]# cp -r /var/lib/mysql     /root/mysql.bak
host50]# scp -r /root/mysql.bak  root@192.168.4.51:/tmp/


host51]# systemctl stop mysqld       //停止mysqld程序
host51]# rm -rf /var/lib/mysql/*      //把原来51的mysql里数据清空
host51]# cp -r /tmp/mysql.bak/*  /var/lib/mysql/  把50上的数据拷贝到51mysql下面
host51]# chown -R mysql:mysql /var/lib/mysql
host51]#  systemctl start mysqld
host51]# mysql -uroot -p密码(同50是一致,因为公用一样mysql库)
host51]# show databases;查看验证







