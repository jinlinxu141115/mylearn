2019.11.8　数据库　第三天　命令

1.查看搜索路径

mysql>  show variable like "secure_file_priv";

]# mkdir /myload
]# chown mysql /myload
vim /etc/my.cnf
[mysqld]
secure_file_priv="/myload"

sysetmctl restart mysqld
2.数据导入
   数据导入步骤
     --默认只有root用户有数据导入权限
     --建表
     --导入数据
   命令格式
  mysql>load data infile "目录名/文件名"
          into table 库名.表名
          fields terminated by "分隔符"
           lines terminated by "\n";
    注意事项:
        ---字段分隔符要文件一致
        --表字段类型和字段个数要与文件匹配
        --导入数据是指定文件的绝对路径
reate table user (
    -> name char(50),
    -> password char(1),
    -> uid  int ,
    -> gid  int ,
    -> coment char(150),
    -> homedir char(100),
    -> shell char(50)
    -> );

mysql> load data infile "/myload/passwd" 
    -> into table user 
    -> fields terminated by ":"
    -> lines  terminated by "\n";



mysql> alter table user add id int primary key auto_increment first;

3.数据导出:
         注意事项
             --导出数据行数由SQL查询决定.
             --导出的是表记录,不包括字段名.
            --自动创建存储数据的文件.
            --存储数据文件,具有唯一性.

  格式  > select 命令 into outfile "目录名/文件名"
           fields  terminated by "分隔符"
              lines  terminated by "\n"
  select id ,name,uid from user  into outfile "/myload/user1.txt";

4.管理表记录

4.1增加表记录
  --字段值要与字段类型相匹配.
  --字符类型的字段,要""号括起来
  --依次给所有字段赋值是,字段名可以省略.
  -- 只给部分字段赋值是,必须明确写出对应的字段名称.
  --没有赋值的字段使用默认值或自增长赋值.

a)增加表记录 , 添加1条记录,给所有字段赋值
 --insert into  表名  values(字段值列表);
  b)增加表记录 , 添加多条记录,给所有字段赋值
 --insert into  表名  values(字段值列表),(字段值列表);
  c)增加表记录 , 添加1条记录,给指定字段赋值
 --insert into  表名(字段名列表)  values(字段值列表);
   d)增加表记录 , 添加1条记录,给指定字段赋值多个赋值
 --insert into  表名(字段名列表)  values(字段值列表),(字段值列表);

4.2查询表记录
   --select 字段1,字段2.....字段N from 库名.表名
     where 条件表达式;

   注意事项:
          --* 表示所有字段
          -- 查看当前库表记录时库名可以省略
          --字段列表决定显示列个数
          --条件决定显示行的个数

4.3 更新表记录
   格式1 批量更新
   格式2 条件匹配更新
   ---update  库名.表名
        set   字段名=值,字段名=值,字段名=值,......
        where  条件表达式;

 注意事项:
          --字段值要与字段类型相匹配
          --对于字符的类型的字段,值要用双引号括起来.
          --若不使用where限制条件,会更新所有记录字段值.
          --限定条件时,只能新匹配条件的记录的字段值.

4.4删除表记录.
  格式1 ,条件匹配删除
   --delete from 库名.表名 where 条件表达式;
  格式2,删除所有记录
    --delete from 库名.表名

注意事项
     --不加条件删除表中的所有行.


5.匹配条件
  
5.1基本匹配条件

    a.数值比较,字段必须是数字类型.
  = ,> ,>=,<,<= ,!=

5.2字符比较/匹配空/非空

 = ,!=  is null (空) , is not null (非空)

5.3逻辑匹配

or 逻辑或  , and 逻辑与, !或者not 逻辑非  

5.4.范围匹配/去重显示

匹配范围内的任意一个值即可

in (值列表)    在...里..
not in (值列表)  不在...里...
between 数字 and 数字  在...之间..
distinct 字段名    去重显示.


6.高级匹配条件


6.1模糊查询
用法 -- where 字段名 like '通配符'
     -- _ 表示1个字符
     --%  表示0~n个字符

例如: select name from user where name like "____";

6.2 正则表达式

用法 -- where 字段名 regexp '正则表达式'
     --正则元字符 ^ $ . [] * |
例如: select name from user  where name regexp  '^j|y$';
6.3 四则运算

运算操作,前提字段必须是数值类型

+ - * / % () 优先级



7.操作查询结果


7.1 聚集函数
--msql 内置数据统计函数

--avg(字段名)        统计字段平均值
--sum(字段名)         统计字段之和
--min(字段名)          统计字段最小值
--max(字段名)           统计字段最大值
--count(字段名)         统计字段值的个数


7.2查询结果排序

用法 --sql查询 order by 字段名 [ asc| desc ];
    --asc  升序 排列
     --desc  降序排列

7.3 查询结果分组

用法  --sql 查询 group by 字段名;

select shell from user where uid<=1000 group by shell;

7.4查询结果过滤

用法  sql查询  having 条件表达式;

select name from user where uid >=1000 having name="bab";


7.5限制查询结果显示行数

用法 sql查询  limit  数字;// 显示查询结果前多少条记录
      sql 查询 limit 数字1,数字2;//显示指定范围内的查询记录

   --数字1 起始行 (0代表第1行)
   --数字2 总行数.


phpMyadmin













  

