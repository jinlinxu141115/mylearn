2019.11.15　RDBMS　第三天　命令


一. 数据分片概述
   .相关概念

1.1 分库/分表
 A) 什么是分库分表
  --将存放在一台数据库服务器中的数据,按照特定方式进行拆分,分散存放到多台数据库服务器中,一达到分散单台服务器负载的效果.

          应用1              应用2
               分布式数据库服务 
    逻辑库1       逻辑库2                逻辑库3


  B)水平分割
    --按照表中指定字段的分片规则,将表记录按行切分,分散存储到多个数据库中.

                                                         物理库        
                             User_id%3 ----  MySQL(db01)        
  
  app   MYCAT (User_DB)逻辑库  User_id%3  --- MySQL(db02)
                             
                               User_id%3 ---  MySQL(db02)
    
   C)垂直分割
     纵向切分
     --将单个数据库的多个表按业务类型分类,分散存储到不同数据库.

                        Application

     客户(Cluster)         存款(Cluster)    贷款(Cluster)     支付(Cluster)


1.2 MyCAT介绍

   .软件介绍
    mycat 是基于java的分布式数据系统中间件,为高并发环境的分布式存储提供解决方案.
     --适合数据大量写入存储需求.
     --支持MYSQL.Oracle,Sqlserver , Mongodb等
     --提供数据读写分离服务
     --提供数据分片服务
     --基于阿里巴巴Cobar进行研发的开源软件 


     A)分片规则
       .mycat支持提供10种分片规则
           1.枚举法 sharding-by-intfile//
           2.固定分片 rule1
           3.范围约定 auto-sharding-long
           4.求模法 mod-long 
           5.日期列分去法 sharding-by-date
           6.通配取模sharding-by-pattern
         7.ASCII码求模通配 sharding-by-prefixpattern
           8.编程指定 sharding-by-substring
           9.字符串拆分hash解析sharding-by-stringhash
          10.一致性hash   sharding-by-murmur


          B)工作过程
         .当mycat收到一个SQL命令时
             1) 解析SQL命令涉及到的表.
             2)然后看mycat的主配置文件是否有对该表的配置,如果有分片规则,则获取SQL命令里分片字段值,并匹配分片函数,获得分片列表
             3)然后将SQL命令发往对应的分片服务器去执行.
             4)最后收集和处理所有分片结果数据,并返回客户端.

1.3部署MyCAT服务

    A)拓扑图
                                      ---------- 客户端
   .数据分片拓扑结构                 --                    
                                   分片服务器
              -----------------------------------------------------------------------------
             数据库服务器         数据库服务器        数据库服务器

     B)部署MyCAT服务
     
         1.3.1 安装软件
           ..安装JDK
           ..安装mycat服务软件包

[root@host60 ~]# yum -y install java-1.8.0-openjdk.x86_64
[root@host60 ~]# tar -zxvf Mycat-server-1.6-RELEASE-20161028204710-linux.tar.gz  
[root@host60 ~]# mv mycat/ /usr/local/
[root@host60 ~]# ls /usr/local/mycat/
 
         1.3.2 目录结构

        ls /usr/local/mycat/
        
        --bin  //mycat命令
        --catlet   //扩展功能
        --conf   //配置文件
        --lib        //mycat使用jar包
        --logs   //mycat启动日志和运行日志
         --warapper.log   //mycat服务器启动日志
         --mycat.log  //记录sql脚本执行后的报错内容.
         --server.xml     //设置连接账号及逻辑库
         --schema.xml     //配置数据分片
          --rule.xml        //分片规则
               --其它文件            //函数调用文件

          1.3.3 创建连接用户
          ..定义客户端连接用户名,密码,逻辑库(name="schemas">TESTDB) 
         ./usr/local/mycat/conf/server.xml   //扩展标记语言,成对出现
               <!--                       -->这个注释符号.
          1.3.4 配置数据分片(定义数据分片存储表)
             vim /usr/local/mycat/conf/schema.xml
          <mycat:server ...>   
------------------------------------------------------------------------------------------------------------------------------
 A..定义分片表规则
----------------------------------------------------------------------------------------------------------------------------------
 <schema>             
        <table name="travelrecord" dataNode="dn1,dn2,dn3" rule="auto-sharding-long" />      //dataNode:定数据节点名(有多少台数据库服务器) rule:指定使用分片规则,type=global //数据不片存储,会在后端每台数据库服务器上存储数据.
         <table >   </table> //定义表,逻辑表
       <table name="company" primaryKey="ID" type="global" dataNode="dn1,dn2,dn3" />  //定义commp

              </schema>
------------------------------------------------------------------------------------------------------------------------
B.. 定义数据库,dn1,dn2,dn3,对应的数据库系统名字和对应存放数据库
--------------------------------------------------------------------------------------------------------------------------
<dataNode name="dn1" dataHost="mysql53" database="db1" />
 <dataNode name="dn2" dataHost="mysql54" database="db2" />
  <dataNode name="dn3" dataHost="mysql55" database="db3" />
 
 --------------------------------------------------------------------------------------------------------------------------
C..host为hostM1为第1台服务器分片服务器,用pljadmin用户去访问53数据库服务器
----------------------------------------------------------------------------------------------------------------------------
<dataHost name="mysql53" maxCon="1000" minCon="10" balance="0"
                          writeType="0" dbType="mysql" dbDriver="native" switchType="1"  slaveThreshold="100">
                <heartbeat>select user()</heartbeat>
                <writeHost host="hostM1" url="192.168.4.53:3306" user="pljadmin"
                                   password="123qqq...A">
                </writeHost>
        </dataHost>    
              </schema>
-----------------------------------------------------------------------------------------------------------------------------
       </mycat:server>
          1.3.5 配置数据库服务器
           ..创建库   //配置三台数据库服务器
           ..创建授权用户  //授权分片服务器访问各数据的用户
   mysql> grant all on *.* to pljadmin@"%" identified by "123qqq...A";

          1.3.6 启动服务
[root@host60 conf]# /usr/local/mycat/bin/mycat start  //mycat服务器启动
Starting Mycat-server...
[root@host60 conf]# netstat -natup | grep :8066
tcp6       0      0 :::8066                 :::*  
[root@host60 conf]# /usr/local/mycat/bin/mycat stop  //服务停止
日志:/usr/local/mycat/logs/wrapper.log 
          1.3.7 客户端连接
           .客户端连接分片服务器存储数据.
           --连接
           --选择库
           --建表
           --插入记录

[root@host50 ~]# mysql -h192.168.4.60 -P8066 -uroot -p123456
mysql> create table employee(ID int primary key auto_increment ,
    -> sharding_id int ,
    -> name char(15),
    -> homeaddr char(30));


  1.4分片规则

1.4.1  
   sharding-by-intfile
    -字段值必须在列举范围内选择
-----------------------------------------------------------------------------------------------------------------
   首先看哪些表分片规则是枚举法
---------------------------------------------------------------------------------------------------------------
    <table name="employee" primaryKey="ID" dataNode="dn1,dn2,dn3"
                           rule="sharding-by-intfile" />
--------------------------------------------------------------------------------------------------------------
查看 sharding-by-intfile 规则,查看对应的算法
vim   /usr/local/mycat/conf/rule.xml
--------------------------------------------------------------------------------------------------------------
<tableRule name="sharding-by-intfile">
                <rule>
                        <columns>sharding_id</columns>
                        <algorithm>hash-int</algorithm>
                </rule>
        </tableRule>

查看hash-int 算法 对应的 (分片对应规则的文件)
<function name="hash-int"
                class="io.mycat.route.function.PartitionByFileMap">
                <property name="mapFile">partition-hash-int.txt</property>
        </function>

vim 	/usr/local/mycat/conf/partition-hash-int.txt 
//修改为规定不同的  sharding_id 值,会根据不同值,存放在不同后端数据服务器.
当sharding_id 复制为10000,或10010 ,10020,分别会存放到不同服务器
10000=0    mysql53 db1  192.168.4.53
10010=1    mysql54 db2  192.168.4.54
10020=2    mysql55 db3  192.168.4.55
 --------------------------------------------------------------------------------------------------------------------------------


1.4.2求模法:  mod-long
   --根据字段值与设定的数字求模结果存储数据.
x  int 数字   余数
21        3       0(第一台)   dn1 mysql53   db1
4       3     1         dn2 mysql54   db2
5       3     2         dn3 mysql55  db3

---------------------------------------------------------------------------------------------------------------------------
查看去模法是   vim  schema.xml
<table name="hotnews" primaryKey="ID" autoIncrement="true" dataNode="dn1,dn2,dn3"  rule="mod-long" />
------------------------------------------------------------------------------------------------------
vim   /usr/local/mycat/conf/rule.xml  查看求模的分片规则,建表要有id,调用算法,mod-long
<tableRule name="mod-long">
 <rule> <columns>id</columns>
         <algorithm>mod-long</algorithm>
                </rule>
        </tableRule>

在 /usr/local/mycat/conf/rule.xml 后面查看mod-long算法,具体配置规则如下:
 <function name="mod-long" class="io.mycat.route.function.PartitionByMod">
                <!-- how many data nodes -->
     <property name="count">3</property>  //3为去摸数,具体取决有多少台服务器
        </function>

----------------------------------------------------------------------------------------------------------------------
全局存储 type=global
<table name="goods" primaryKey="ID" type="global" dataNode="dn1,dn2,dn3" />



二. 在分片服务器添加新库,新表

   2.1添加新库
   2.2添加新表
   2.3重启动mycat服务
   2.4客户端测试
[root@host50 ~]# mysql -h192.168.4.60 -P8066 -uroot -p123456
        建表
        插入
        验证



====================================================
案例一.部署MyCAT服务  50客户端  60 分片服务器       53 ,54, 55 数据库服务器
====================================================

---------------------------------------------------------------------------------------------------------------------------
A..60服务器 配置分片服务
-------------------------------------------------------------------------------------------------------------------------


[student@room9pc01 mysql]$ scp Mycat-server-1.6-RELEASE-20161028204710-linux.t.gz  root@192.168.4.56:/root/    //把mycat软件上传到56root家目录下

[root@host60 ~]# yum -y install java-1.8.0-openjdk.x86_64 
[root@host60 ~]# java -version
openjdk version "1.8.0_161"
OpenJDK Runtime Environment (build 1.8.0_161-b14)
OpenJDK 64-Bit Server VM (build 25.161-b14, mixed mode)

[root@host60 ~]# tar -zxvf Mycat-server-1.6-RELEASE-20161028204710-linux.tar.gz 
mycat/bin/wrapper-linux-ppc-64

[root@host60 ~]# mv mycat/ /usr/local/
[root@host60 ~]# ls /usr/local/mycat/
bin  catlet  conf  lib  logs  version.txt

定义连接客户端用户名和,密码,逻辑名.使用默认的,不做修改设置.
[root@host60 ~]# vim /usr/local/mycat/conf/server.xml//定义连接客户端用户名和,密码,逻辑名.使用默认的,不做修改设置.
<user name="root">
                <property name="password">123456</property>
                <property name="schemas">TESTDB</property>

[root@host60 conf]# vim  schema.xml      //定义数据分片存储的表
[root@host60 conf]# sed -i '56,77d' schema.xml 
[root@host60 conf]# sed -i '39,42d' schema.xml //删除不相关行,不需要内容


<schema name="TESTDB" checkSQLschema="false" sqlMaxLimit="100">
                <!-- auto sharding by id (long) -->
                <table name="travelrecord" dataNode="dn1,dn2,dn3" rule="auto-sharding-long" />

                <!-- global table is auto cloned to all defined data nodes ,so can join
                        with any table whose sharding node is in the same data node -->
                <table name="company" primaryKey="ID" type="global" dataNode="dn1,dn2,dn3" />
                <table name="goods" primaryKey="ID" type="global" dataNode="dn1,dn2,dn3" />
                <!-- random sharding using mod sharind rule -->
                <table name="hotnews" primaryKey="ID" autoIncrement="true" dataNode="dn1,dn2,dn3"
                           rule="mod-long" />
                <!-- <table name="dual" primaryKey="ID" dataNode="dnx,dnoracle2" type="global"
                        needAddLimit="false"/> <table name="worker" primaryKey="ID" dataNode="jdbc_dn1,jdbc_dn2,jdbc_dn3"
                        rule="mod-long" /> -->
                <table name="employee" primaryKey="ID" dataNode="dn1,dn2,dn3"
                           rule="sharding-by-intfile" />
                <table name="customer" primaryKey="ID" dataNode="dn1,dn2,dn3"
                           rule="sharding-by-intfile">
                        <childTable name="orders" primaryKey="ID" joinKey="customer_id"
                                                parentKey="id">
                                <childTable name="order_items" joinKey="order_id"
                                                        parentKey="id" />
                        </childTable>
                        <childTable name="customer_addr" primaryKey="ID" joinKey="customer_id"
                                                parentKey="id" />
                </table>
                <!-- <table name="oc_call" primaryKey="ID" dataNode="dn1$0-743" rule="latest-month-calldate"
                        /> -->
        </schema>


定义数据库,dn1,dn2,dn3,对应的数据库系统名字和对应存放数据库
<dataNode name="dn1" dataHost="mysql53" database="db1" />
 <dataNode name="dn2" dataHost="mysql54" database="db2" />
  <dataNode name="dn3" dataHost="mysql55" database="db3" />

指定数据库服务器的IP地址

<dataHost name="mysql53" maxCon="1000" minCon="10" balance="0"
                          writeType="0" dbType="mysql" dbDriver="native" switchType="1"  slaveThreshold="100">
                <heartbeat>select user()</heartbeat>
                <writeHost host="hostM1" url="192.168.4.53:3306" user="pljadmin"
                                   password="123qqq...A">
                </writeHost>
        </dataHost>    //host为hostM1为第1台服务器分片服务器,用pljadmin用户去访问53数据库服务器

   <dataHost name="mysql54" maxCon="1000" minCon="10" balance="0"
                          writeType="0" dbType="mysql" dbDriver="native" switchType="1"  slaveThreshold="100">
                <heartbeat>select user()</heartbeat>
                <writeHost host="hostM2" url="192.168.4.54:3306" user="pljadmin"
                                   password="123qqq...A">
                </writeHost>
        </dataHost> //host为hostM2为第二台服务器,分片服务器,用pljadmin用户去访问54数据库服务器

           <dataHost name="mysql55" maxCon="1000" minCon="10" balance="0"
                          writeType="0" dbType="mysql" dbDriver="native" switchType="1"  slaveThreshold="100">
                <heartbeat>select user()</heartbeat>
                <writeHost host="hostM3" url="192.168.4.55:3306" user="pljadmin"
                                   password="123qqq...A">
                </writeHost>
        </dataHost>//host为hostM3为第三台服务器,分片服务器,用pljadmin用户去访问54数据库服务器

#wq
[root@host60 conf]# /usr/local/mycat/bin/mycat start  //启动服务
Starting Mycat-server...
[root@host60 conf]# netstat -natup | grep :8066
tcp6       0      0 :::8066                 :::*                    LISTEN      23539/java 


---------------------------------------------------------------------------------------------------------------------------------
50客户端 连接配置

[root@host50 ~]# mysql -h192.168.4.60 -P8066 -uroot -p123456


mysql> show databases;
+----------+
| DATABASE |
+----------+
| TESTDB   |
+----------+
mysql> use TESTDB;
Reading table information for completion of table and column names
You can turn off this feature to get a quicker startup with -A

Database changed
mysql> show tables;
+------------------+
| Tables in TESTDB |
+------------------+
| company          |
| customer         |
| customer_addr    |
| employee         |
| goods            |
| hotnews          |
| orders           |
| order_items      |
| travelrecord     |
+-----------------
-------------------------------------------------------------------------------------------------------------------------------
例子创建employee表 .建表先看employee表规则 

vim /usr/local/mycat/conf/schema.xml
 <table name="employee" primaryKey="ID" dataNode="dn1,dn2,dn3"
                           rule="sharding-by-intfile" />
--------------------------------------------------------------------------------------------------------------------------
查看 sharding-by-intfile 规则,
vim /usr/local/mycat/conf/rule.xml  查看对应的算法
--------------------------------------------------------------------------------------------------------------
<tableRule name="sharding-by-intfile">
                <rule>
                        <columns>sharding_id</columns>
                        <algorithm>hash-int</algorithm>
                </rule>
        </tableRule>
-------------------------------------------------------------------------------------------------------------------------------
查看hash-int 算法 对应的 (分片对应规则的文件)
---------------------------------------------------------------------------------------------------------------------------------
<function name="hash-int"
                class="io.mycat.route.function.PartitionByFileMap">
                <property name="mapFile">partition-hash-int.txt</property>
        </function>

vim 	/usr/local/mycat/conf/partition-hash-int.txt 
//修改为规定不同的  sharding_id 值,会根据不同值,存放在不同后端数据服务器.
当sharding_id 复制为10000,或10010 ,10020,分别会存放到不同服务器
10000=0    mysql53 db1  192.168.4.53
10010=1   mysql54 db2  192.168.4.54
10020=2    mysql55 db3  192.168.4.55

-----------------------------------------------------------------------------------------------------------------------------------

[root@host50 ~]# mysql -h192.168.4.60 -P8066 -uroot -p123456


mysql> create table employee(ID int primary key auto_increment ,
    -> sharding_id int ,
    -> name char(15),
    -> homeaddr char(30));

mysql> insert into employee(sharding_id,name,homeaddr) values (10000,"bob","usa"); 
mysql> insert into employee(sharding_id,name,homeaddr) values (10000,"bob1","usa");
mysql> insert into employee(sharding_id,name,homeaddr) values (10000,"bob2","usa");
mysql> insert into employee(sharding_id,name,homeaddr) values (10010,"lucy1","usa");
mysql> insert into employee(sharding_id,name,homeaddr) values (10020,"lucy2","usa");

mysql> select * from employee;  //在60分片服务器上,查看虚拟表中总共有存有5条记录
+----+-------------+-------+----------+
| ID | sharding_id | name  | homeaddr |
+----+-------------+-------+----------+
|  1 |       10000 | bob   | usa      |
|  2 |       10000 | bob1  | usa      |
|  3 |       10000 | bob2  | usa      |
|  1 |       10020 | lucy2 | usa      |
|  1 |       10010 | lucy1 | usa      |
+----+-------------+-------+----------+

---------------------------------------------------------------------------------------------------------------------
在53数据库服务器上里查看 数据: 有3条记录
----------------------------------------------------------------------------------------------------------------------
mysql> select * from employee;
+----+-------------+------+----------+
| ID | sharding_id | name | homeaddr |
+----+-------------+------+----------+
|  1 |       10000 | bob  | usa      |
|  2 |       10000 | bob1 | usa      |
|  3 |       10000 | bob2 | usa      |
+----+-------------+------+----------+

---------------------------------------------------------------------------------------------------------------------
在54数据库服务器上里查看 数据:有1条记录
----------------------------------------------------------------------------------------------------------------------
mysql> select * from employee;
+----+-------------+-------+----------+
| ID | sharding_id | name  | homeaddr |
+----+-------------+-------+----------+
|  1 |       10010 | lucy1 | usa      |
+----+-------------+-------+----------+


---------------------------------------------------------------------------------------------------------------------
在55数据库服务器上里查看 数据:有1条记录
----------------------------------------------------------------------------------------------------------------------
mysql> select * from employee;
+----+-------------+-------+----------+
| ID | sharding_id | name  | homeaddr |
+----+-------------+-------+----------+
|  1 |       10020 | lucy2 | usa      |
+----+-------------+-------+----------+
1 row in set (0.00 sec)

+++++++++++++++++++++++++++++++++++++++++++++++++++
创建hotnews表

mysql> create table hotnews(id int ,title char(15),connect char(50));
Query OK, 0 rows affected (0.67 sec)

mysql> desc hotnews;
+---------+----------+------+-----+---------+-------+
| Field   | Type     | Null | Key | Default | Extra |
+---------+----------+------+-----+---------+-------+
| id      | int(11)  | YES  |     | NULL    |       |
| title   | char(15) | YES  |     | NULL    |       |
| connect | char(50) | YES  |     | NULL    |       |
+---------+----------+------+-----+---------+-------+

mysql> insert into hotnews(id,title,connect) values(3,"ope","dmy"),(4,"shell","wk"),(5,"clound","lx");
Query OK, 3 rows affected (0.11 sec)

mysql> select * from hotnews;
+------+--------+---------+
| id   | title  | connect |
+------+--------+---------+
|    3 | ope    | dmy     |
|    4 | shell  | wk      |
|    5 | clound | lx      |
+------+--------+---------+

--------------------------------------------------------------------------------------------------------------------
在53数据库服务器上里查看 数据: id%3取余为0 的数据 存放在 53服务器上
----------------------------------------------------------------------------------------------------------------------
mysql> select * from hotnews;
+------+-------+---------+
| id   | title | connect |
+------+-------+---------+
|    3 | ope   | dmy     |
+------+-------+---------+

--------------------------------------------------------------------------------------------------------------------
在54数据库服务器上里查看 数据: id%3取余为1 的数据 存放在 54服务器上
----------------------------------------------------------------------------------------------------------------------
mysql> select * from hotnews;
+------+-------+---------+
| id   | title | connect |
+------+-------+---------+
|    4 | shell | wk      |
+------+-------+---------+
1 row in set (0.00 sec)
-------------------------------------------------------------------------------------------------------------------
在55数据库服务器上里查看 数据: id%3取余为2 的数据 存放在 55服务器上
----------------------------------------------------------------------------------------------------------------------
mysql> select * from hotnews;
+------+--------+---------+
| id   | title  | connect |
+------+--------+---------+
|    5 | clound | lx      |
+------+--------+---------+
1 row in set (0.00 sec)


++++++++++++++++++++++++++++++++++++++++++++++
全局存储 设定.  type=goo
<table name="goods" primaryKey="ID" type="global" dataNode="dn1,dn2,dn3" />

mysql> create table goods(ID int primary key, name char(10),class char(7));
Query OK, 0 rows affected (0.66 sec)

mysql> insert into goods(ID,name,class) values (1,"jom","nsd100"),(2,"tom","nsd123"),(3,"lucy","nsd145"); //插入新数据,goods(每个标量的列出了)

-------------------------------------------------------------------------------------------------------------------
在50 客户机  53,54,55数据库服务器上里查看 对应数据
----------------------------------------------------------------------------------------------------------------------
mysql> select * from goods;
+----+------+--------+
| ID | name | class  |
+----+------+--------+
|  1 | jom  | nsd100 |
|  2 | tom  | nsd123 |
|  3 | lucy | nsd145 |



================================================
在60分片服务器上 ,自己创建新库,新表
==================================================
[root@host60 conf]# vim server.xml
<user name="root">
                <property name="password">123456</property>
                <property name="schemas">TESTDB,BBSDB</property>

                <!-- 表级 DML 权限设置 -->
                <!--            
                <privileges check="false">
                        <schema name="TESTDB" dml="0110" >
                                <table name="tb01" dml="0000"></table>
                                <table name="tb02" dml="1111"></table>
                        </schema>
                </privileges>           
                 -->
        </user>

        <user name="user">      //在root远程登入,库里添加新的BBSDB库


[root@host60 conf]# vim schema.xml

 <schema name="BBSDB" checkSQLschema="false" sqlMaxLimit="100">
            <table  name="hotnew2" dataNode="dn1,dn2,dn3" rule="mod-long"     />
            <table  name="user" dataNode="dn1,dn2,dn3" rule="mod-long"     />

        </schema>    //在schema.xml,添加新表.建立表分片规则(user,hotnew2)

[root@host60 conf]# /usr/local/mycat/bin/mycat stop //停止服务,进行加载新配置
Stopping Mycat-server...
Stopped Mycat-server.
[root@host60 conf]# /usr/local/mycat/bin/mycat start
Starting Mycat-server...
[root@host60 conf]# netstat -natup | grep :8066
tcp6       0      0 :::8066                 :::*                    LISTEN      24234/java 
------------------------------------------------------------------------------------------------------------------------------
50客户端进行测试
---------------------------------------------------------------------------------------------------------------------------
[root@host50 ~]# mysql -h192.168.4.60 -P8066 -uroot -p123456
mysql> show databases;
+----------+
| DATABASE |
+----------+
| BBSDB    |
| TESTDB   |
+----------+

mysql> show tables;
+-----------------+
| Tables in BBSDB |
+-----------------+
| hotnew2        


创建 user表

|mysql> create table user(id int ,name char(10),password char(6));
Query OK, 0 rows affected (0.68 sec)

mysql> insert into user (id ,name,password) values (11,"a","ee11"),(12,"b","ee12"),(13,"c","ee13");
Query OK, 3 rows affected (0.13 sec)

| user            |
+-----------------+
在50客户端查看结果
mysql> select * from user;
+------+------+----------+
| id   | name | password |
+------+------+----------+
|   13 | c    | ee13     |
|   11 | a    | ee11     |
|   12 | b    | ee12     |
+------+------+----------+

---------------------------------------
在53查看结果
--------------------------------------------
mysql> select * from user;
+------+------+----------+
| id   | name | password |
+------+------+----------+
|   12 | b    | ee12     |
+------+------+----------+
1 row in set (0.00 sec)

----------------------------------------------
在54查看结果
-------------------------------------------
mysql> select * from user;
+------+------+----------+
| id   | name | password |
+------+------+----------+
|   13 | c    | ee13     |
+------+------+----------+
---------------------------------------------------
在55查看结果
-----------------------------------------------------------
mysql> select * from user;
+------+------+----------+
| id   | name | password |
+------+------+----------+
|   11 | a    | ee11     |
+------+------+----------+
1 row in set (0.00 sec)



