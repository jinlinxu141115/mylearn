ip  172.40.50.117  
vnc 7000

庞丽静
邮箱 panglj@tedu.cn  中心名-nsd1908-姓名
		      
		      

ftp://172.40.50.117/nsd1908/all_note.txt
软件 真机/linux-soft/03/
第3阶段课程内容
			RDBMS1  数据库基础 day05
			RDBMS2  数据库进阶
					   mysql

			NoSQL   非关系型数据库 redis

			securiyt 安全与监控     Zabbix

工作岗位：数据库管理员  DBA  linux运维 IDC


不迟到 不早退 ，  认真听讲 专心做实验 

重要的命令  例子步骤   all_note.txt 文件

++++++RDBMS1_DAY01
一 、相关概念
二、 搭建数据库服务器 
三、数据库服务基本使用
	3.1 连接数据服务器的方式 
		mysql -h数据库服务器ip  -u用户  -p密码 
	3.2 把数据存储到服务的流程
		建立连接
		建库
		建表
		插入记录
		断开连接
	3.3 sql命令 使用规则 
	3.4 库管理命令
	3.5 表管理命令
mysql> create database db1;
mysql> create table  db1.sutinfo(name char(15) , homedir char(20), class char(7) );

mysql> use db1;
mysql> show tables;

mysql> desc sutinfo;
mysql> select  * from sutinfo;

	3.6 表记录管理
		插入表记录
mysql> insert into  db1.sutinfo  values ("bob","usa","nsd1908"),("lilei" , "china" ,"nsd1907");

		查看表记录
select  *  from db1.sutinfo;

		修改字段值（表头的值）
mysql> update db1.sutinfo set homedir="beijing" ;
mysql> update db1.sutinfo set homedir="shanghai" where name="lilei";

		删除表记录
mysql> delete  from  db1.sutionfo;
mysql> show tables;
mysql> drop  table sutinfo;

mysql> use db1;

mysql> create table 学生表(姓名 char(10) , 地址  char(100) )DEFAULT CHARSET=utf8 ;


mysql> show create table 学生表;


mysql> insert into  学生表 values ("张三丰","武当山");

mysql> select  * from  学生表;

四、数据类型
	4.1 字符类型 char / varchar  /text  / blob

mysql> create table t3 (name char(5) ,mail varchar(50));
mysql> desc  t3;
mysql> insert into db1.t3 values ("jerry","jerry@163.com" );

mysql> insert into db1.t3 values ("jerrya","jerry@163.com" );
ERROR 1406 (22001): Data too long for column 'name' at row 1

mysql> insert into db1.t3 values ("jim","jerry@163.com" );
mysql> select  * from db1.t3;

mysql> desc mysql.user;

	4.2 数值类型
create table db1.t2(stu_num  int , name  char(5) , 
age tinyint unsigned , pay float , money float(5,2) );

mysql> desc db1.t2;

mysql> desc mysql.user;
mysql> insert into db1.t2 values (3,"bob",19 ,22222,999.99);
mysql> insert into db1.t2 values (1,"tom",19.5 ,22222,88);
mysql> insert into db1.t2 values (1,"jerry",19.5 ,22222,1.25);
mysql> select  * from db1.t2;

	4.3 日期时间类型

mysql> create table db1.t4( name char(5) , your_start year , up_time time ,birthday  date  , party datetime);

mysql> desc  db1.t4;

mysql> insert into  db1.t4 values ("bob" , 1990 ,083000 ,20191120 ,20191224203000);

mysql>  select  *  from db1.t4 ;

ql> insert into  db1.t4 values ("tom" , 1990 ,curtime() ,20191120 ,now());

mysql> select  * from  db1.t4; 

mysql> select now();
mysql> select month( now() );
mysql> select  year( now() );

	4.4 枚举类型（给字段赋值时 值值能在类型列举的范围内选择）
		enum(值1，值2, 值3 ) 单选
		set(值1，值2, 值3 ) 多选


mysql> create table t5(name char(5) ,sex  enum("boy","girl","no") );

mysql> desc t5;

mysql> insert into  t5 values ( "john" ,"man" ) ;
ERROR 1265 (01000): Data truncated for column 'sex' at row 1

mysql> 
mysql> insert into  t5 values ( "john" ,"boy" ) ;

mysql> create  table  t6 ( name  char(5), likes set("eat","sleep","game","drink") );


mysql> desc t6;

mysql> insert into  t6 values ("jerry","eat,sleep,drink");

mysql> insert into  t6 values ("lucy","eat,sleep,money");
ERROR 1265 (01000): Data truncated for column 'likes' at row 1

字符类型   数值类型  日期时间类型  枚举类型

日期时间类型 year   datetime / timestamp
             xxxx

当使用2位数给year类型字段赋值遵循如下规律：
01~69视为  2001~2069
70~99视为  1970~1999

mysql> select  your_start from t4;
mysql> insert into  t4(your_start)values (58),(88);
mysql> select  your_start from t4;


datetime / timestamp 的 区别：
当未给timestamp字段赋值时，自动以当前系统时间赋值，而datetime 值为 NULL (空)

mysql> create table  t7 ( party  datetime , meetting  timestamp  );
mysql> insert into t7  values (20191107091328 , 20191224203000);
mysql> insert into  t7(party) value(20171225214548);
mysql> insert into  t7(meeting) value(20151225214548);
mysql> select  * from t7;


课后练习
1 创建 before_pop (前任信息) 自己定义表结构 


2 搭建3台数据库服务器
192.168.4.51 
192.168.4.52 
192.168.4.53
 
+++++++RDBMS1_DAY02
一、表结构
	2.1 约束条件
mysql> use db1;
mysql> create table  t77 ( name  char(10) not null ,
    -> age  tinyint unsigned  default 19,
    -> class char(7) not null default "nsd1908",
    -> up_time time
    -> );

mysql> desc  t77;

mysql> insert into t77(name,up_time) values("john",083000);
mysql> insert into t77 values ("null" , 21 , "null" , null);
	
	2.2 修改表结构
mysql> alter table  db1.t6  
       add mail varchar(50) default  "stu@tedu.cn",
       add sex  enum("m","w") default "m";
	
mysql> alter table  db1.t6 
       add age  int  after name , add stu_num char(9) first;


mysql> alter table   db1.t6 modify  stu_num varchar(9);

mysql> alter table  db1.t6  modify age int after likes;
	
mysql> alter table   db1.t6 
       change sex 性别 enum('m','w') not null default "m" ;

mysql> alter table  db1.t6 drop likes , drop mail;

mysql> alter table  t6 rename  信息表;




二、mysql键值 
	2.1 普通索引 index
		1 什么是索引
		2 索引优点与缺点
		3 为什么要使用索引
		4 使用索引
			查看
			创建： 已有表里创建/建表是创建
			删除
		5 索引使用规则?

  	2.2 主键 primary key
		1 使用规则

		字段值不允许重复，且不允许赋NULL值
	      一个表中只能有一个primary  key字段
               多个字段都作为主键，称为复合主键，必须一起创建。
		通常与 auto_increment 连用,让字段使用自增长方式赋值 
 		主键字段的标志是PRI             
		
		2 创建主键
mysql> use db2;

mysql> create table  t2 (
    -> name char(10) primary key, class char(9) );

mysql> create table  t3 ( 
      name char(10) , class char(9) , primary key(name) );

		3 添加主键
mysql> delete from db1.t4;
mysql> alter table db1.t4  add  primary key(name);
mysql> desc db1.t4;
mysql> insert into db1.t4(name) values(null);
mysql> insert into db1.t4(name) values("null");
mysql> insert into db1.t4(name) values("bob");
mysql> insert into db1.t4(name) values("bob");
mysql> insert into db1.t4(name) values("bob22");
	
		4 删除主键
mysql> alter table db1.t4  drop  primary key	
mysql> insert into db1.t4(name) values("bob22");

		5复合主键(多个字段一起做主键,字段的值不同时重复就可以)，必须一起创建。
	
mysql> create table t4 ( cip char(15) , sername char(20) , serport smallint , status enum("yes","no") ,primary key ( cip , serport ) ) ;

mysql> desc t4;

insert into t4 values ("1.1.1.1" , "ssh" , 22 , "yes") ;
insert into t4 values ("2.1.1.1" , "ssh" , 22 , "yes") ;
insert into t4 values ("2.1.1.1" , "ftp" , 21 , "no") ;

mysql> alter  table  t4 drop primary key ;

mysql> desc  t4;

		6 主键通常与 auto_increment 连用,实现字段的自增长赋值


mysql> create table  t5 ( id  int  primary key  auto_increment  , name char(10) , age  tinyint );


mysql> insert into  t5 (name , age ) values ("bob",21);
mysql> insert into  t5 (name , age ) values ("jim",17);
	2.3 外键 foreign key

mysql> create table  yg(
      yg_id int primary key auto_increment ,
      name char(10)
      )engine=innodb;

mysql> insert into yg(name) values("jerry");
mysql> insert into yg(name) values("tom");
mysql> insert into yg(name) values("tom");
mysql> select  * from yg;

mysql> create table  gz ( 
       gz_id  int  , 
       gz int , 
       foreign key(gz_id) references yg(yg_id) 
       on update cascade  on delete cascade
       )engine=innodb ;

    mysql> show create table gz\G;

mysql> alter table  gz drop foreign key gz_ibfk_1 ;

mysql> alter table  gz 
    -> add
    -> foreign key(gz_id) references yg(yg_id)
    -> on update cascade on delete cascade ;


mysql> insert into gz values (1,30000);
mysql> insert into gz values (2,40000);
mysql> insert into gz values (3,45000);

ql> insert into gz values (4,50000);
ERROR 1452 (23000): Cannot add or update a child row: a foreign key constraint fails (`db2`.`gz`, CONSTRAINT `gz_ibfk_1` FOREIGN KEY (`gz_id`) REFERENCES `yg` (`yg_id`) ON DELETE CASCADE ON UPDATE CASCADE)
mysql>

mysql> update yg set yg_id=11 where yg_id=1;
mysql> delete from  yg where yg_id=4;
mysql> select  * from yg;
mysql> select  * from gz;

mysql> alter table  gz add primary key (gz_id);


+++++++++RDBMS1_DAY03 
一 数据导入导出
	1.1 检索目录:文件存放的目录
		查看目录
		自定义

	1.2 数据导入 ： 把系统文件的内容存储到库的表里

	1.3 数据导出:把表记录存储到系统文件里
		
		

二、管理表记录
	2.1 插入表记录
insert into  db3.user  values (22,"bob","x",2019,2019,"test user","/home/bob","/bin/bash");

insert into  db3.user  
values 
(23,"bob2","x",2039,2019,"test user","/home/bob2","/bin/bash"),(24,"bob3","x",2029,2019,"test user","/home/bob3","/bin/bash");

mysql> insert into  db3.user (name, uid ) 
       values ("jerry",2069;)

mysql> insert into  db3.user (name, uid ) 
       values ("tom",2039),("lucy",2089);

       2.2 查询表记录 select  
select  字段1, .. .., 字段N  from  库名.表名 [ where   条件表达式 ] ; 

select  * from  db3.user;

select  id , name , shell  from  db3.user ;

select  id , name , shell  from  db3.user where id <= 3 ; 

        2.3 更新表记录
update   库名.表名  set  字段名=值,字段名=值,字段名=值[  where    条件表达式] ;
mysql> update  user set password="x" , coment="root" where name="root";

update   库名.表名  set  字段名=值,字段名=值,字段名=值;
mysql> update  user set password="a" , coment="stu" ;

	删除表记录
	delete from  库名.表名;
	delete from  库名.表名 where 条件表达式;
	mysql> select  * from  user where  id >=22 ;

三、匹配条件 
	3.1 基本匹配条件 select / update  /delete
		1 数值比较
mysql> select  name , uid ,gid from user   where  uid = gid ;

mysql> select  name , uid ,gid from user  where uid != gid;

mysql> select  name , uid ,gid from user  where uid = 3;

		2 字符比较/匹配空/非空
mysql> select name from user where name =  "apache" ;

mysql> select name from user where name =  "mysql" ;

mysql> select name , shell from user  where shell !=  "/bin/bash";

mysql> select name , shell from user  where shell =  "/bin/bash";

mysql> insert into  user(id , name )values(22,null);

mysql> select id ,  name from user where name is null;
mysql> select id ,  name from user where name is not null;

		3  逻辑匹配
mysql> select  * from user 
       where uid = 0  and  name="root" and shell = "/bin/bash";

mysql> select  * from user 
        where uid < 3  or  shell != "/bin/bash" ;

		4 范围匹配/去重显示
mysql> select name from user 
    -> where name  in  ("sync","bin","http","root") ;

mysql> select name , shell  from user  where shell not in ("/bin/bash" ,"/sbin/nologin" );
		
mysql> select  *  from user  where  id  between 5 and 10;

mysql> select  distinct   shell  from  user 
       where shell="/sbin/nologin";

mysql> select  shell  from  user;
mysql> select  distinct   shell  from  user;

mysql> update user set password="f"  where id >= 2 and id <=5 ;
或
mysql> update user set password="f" where  id between 2 and 5;

	3.2 高级匹配条件
		1 模糊查询 like
		where  字段 like ‘’；
		_      表示1个字符
		%     表示0~n个字符
mysql> select name from user where name like '____';
mysql> select name from user where name like '%a%';
mysql> select name from user where name like '_%_';
mysql> select name from user where name like 'r%t';
mysql> select name from user where name like 'a%';
mysql> select name ,uid from user where uid like '___';
		2 正则匹配 where 字段名  regexp   '正则表达式’
                           正则元字符   ^   $   .   [ ]   *    | 
mysql> select name ,uid   from user  where uid regexp '^..$';
mysql> select name ,uid   from user  
           where name regexp '^[abc]';
mysql> insert into  db3.user(name)
       values("ya2ya"),("yaya9"),("bab4y");
mysql> select name ,uid   from user  
       where name regexp '[0-9]';
		3 四则运算 + - * /  %
mysql> update user set uid=uid+1 where id <= 5;
mysql> select id , name , uid from user where id <= 5;
mysql> alter table user add age tinyint default 19 after name;
mysql> select name , age , 2019 - age csnf from user 
       where name="root";
mysql> select name , uid , gid , uid+gid zcj , (uid+gid)/2 pjf from user where  name="mysql";
mysql> select  name , uid from user where uid % 2 = 0;
mysql> select  name , uid from user where uid % 2 != 0;
	3.3 操作查询结果 
		1 排序 order by  字段名  排序方式asc /desc
mysql> select  name,uid from user where  uid between 10 and 100       order by uid  desc;

mysql> select  name,uid from user where  uid between 10 and 100       order by uid  ;

		2 分组  group by  字段名
mysql> select  gid  from  user where id <= 20  group by gid;
mysql> select  shell  from  user where id <= 20  group by shell;
		3 限制显示行 个数
mysql> select id,name,shell from user where id <=10 limit 1;
mysql> select id,name,shell from user where id <=10 limit 3;

mysql> select id ,  name  , shell  from user 
        where id <=10   limit 3,5;

mysql> select id ,  name  , shell  from user 
        where id <=10   limit 1,5;

		4 查询结果过滤 having 条件
		 mysql> select name from  user where shell != "/bin/bash"  having name="mysql";

		5 聚集函数 :对数据做统计的内置命令
mysql> select sum(uid)  from user;
mysql> select avg(uid)  from user;	
mysql> select max(uid) from user ;
mysql> select min(uid) from user ;
mysql> select count(name) from user where uid <=10 ;
mysql> select  count(*) from user;

四、MySQL管理工具（phpmyadmin）


匹配条件： 必备技术  insert select update delete
           单表查询 ( 嵌套查询  多表查询 连接查询 )

++++++RDBMS1_DAY04

一、用户授权：
	1 什么是用户授权：在数据库服务器上添加新的连接用户并设置权限和密码
	2 用户授权命令格式：
	mysql> grant 权限列表 on 库名 to  用户名@"客户端地址"
               identified by "密码" [with grant option] ;

	例子：	
	mysql> grant all on  db4.*  to  yaya@"%" 

		          identified   by "123qqq...A” ;

	权限列表的表示方式？


	3 使用授权用户连接数据库服务器的命令格式
	]# mysql  -h数据库服务器的ip  -u授权用户名 -p密码

	4 相关命令
	select user() ;
	show grants;
	show grants for 用户名@"客户端地址";
	set password=password("密码");
	set password for  用户名@"客户端地址"=password("密码");
	drop user 用户名@"客户端地址";
	
	5 授权信息存储在mysql库下的表里
	user表    记录已有的授权用户及权限
	db表       记录已有授权用户对数据库的访问权限
        tables_priv表       记录已有授权用户对表的访问权限
        columns_priv表   记录已有授权用户对字段的访问权限
!!!查看表记录可以获取用户权限；也可以通过更新记录，修改用户权限

       6 撤销权限 : 删除添加用户的权限
命令格式：
mysql> revoke  权限列表 on 库名 from 用户@“客户端地址”；

	mysql> select  * from  mysql.user where user="mydba";  
	mysql> revoke grant option on *.*  from  mydba@"%";
	mysql> revoke all  on *.*  from  mydba@"%";
	mysql> select  * from  mysql.user where user="mydba";
	mysql> drop user mydba@"%";

二、完全备份
    2.1 物理备份与恢复
	备份50 
	  cp  -r  /var/lib/mysql   /root/mysql.bak
	  scp -r /root/mysql.bak  root@192.168.4.51:/tmp/

	恢复51
	  systemctl  stop mysqld
	  rm -rf /var/lib/mysql/*
	  cp -r /tmp/mysql.bak/*  /var/lib/mysql/
	  chown  -R mysql:mysql  /var/lib/mysql
	  systemctl  start mysqld
	  mysql -uroot -p密码
	  mysql> show databases;

    2.2 逻辑备份与恢复： 使用命令(可以使用mysql服务自带命令或安装其他软件提供的命令）对数据做备份 ,根据备份时的数据 生成与数据对应的命令 保存在定义的文件里。要恢复数据时，执行保存在定义的文件里的命令，就可以把数据恢复了

	备份策略：完全备份 增量备份 差异备份

完全备份命令mysqldump  -uroot -p密码 库名 > 目录/xxx.sql

50 ]# mysqldump -uroot -pA...qqq321  -A  > /mybak/allbak.sql
50 ]# scp  /mybak/allbak.sql  root@192.168.4.51:/tmp/

51]# mysql> drop  database db1; drop database db2;
     mysql> drop  database db3 ; drop database mysql;

51]# mysql -uroot -p密码  < /tmp/allbak.sql
     mysql> show databases;

]# mysqldump  -uroot  -p密码  库名 >  目录/xxx.sql
备份所有数据 ：
	1台服务器           -A 、--all-databases
	1个库               mysql
	1张表		    db3 user
	多个库              -B  库名1  库名2 

]# mysql   -uroot  -p密码  库名 < 目录/xxx.sql

mysqldump的缺点？
	1 备份和恢复数据时，会给表加写锁
	2 新产生的数据无法恢复

00  18  *   *   1  /root/allbak.sh(备份服务器所有数据）

三、增量备份  
	3.1 binlog日志的使用
		1 binlog日志介绍
		2 启用binlog日志
		3 查看已有的日志文件和当前真在使用的日志文件
		4 手动创建新的日志文件
		5 删除已有的日志文件
mysql> purge  master  logs  to  "localhost-bin.000005";
mysql> reset  master ;

		6 自定义日志文件存储目录和名字
]# mkdir /mylog
]# chown  mysql  /mylog

]# vim /etc/my.cnf
   [mysqld]
   log_bin=/mylog/db50
   server_id=50
:wq

]# systemctl  restart mysqld

]# ls /mylog/db50*

		7 修改日志文件记录命令的格式
]# vim /etc/my.cnf
   [mysqld]
	binlog_format="mixed"
:wq
]# systemctl  restart  mysqld
]# mysql -uroot  -p密码
mysql> show variables like "binlog_format";
mysql> show master status ;
mysql> insert into  db3.user(name,uid) values("jima",99);
mysql> insert into  db3.user(name,uid) values("jimb",99);
mysql> insert into  db3.user(name,uid) values("jimc",99);
mysql> show master status ;

		8 查看日志记录的内容
]# mysqlbinlog /mylog/db50.000002  | grep  -i  insert

		休息到 11：20 

	3.2 使用binlog日志恢复数据
            ]# mysqlbinlog  binlog日志  | mysql  -uroot   -p密码
		
            ]# mysqlbinlog 选项  binlog日志  | mysql  -uroot   -p密码


	    选项
		指定偏移量范围
		--start-position=值  --stop-position=值

		指定时间范围
		--start-datetime="yyyy-mm-dd hh:mm:ss"   --stop-datetime="yyyy-mm-dd hh:mm:ss"

50]#  mysql> reset master;
      mysql> show master stauts;
   ]# mysqldump  -uroot -p密码  db3 user  > /root/db3_user.sql
     mysql> insert into  db3.user(name,uid) values("boba", 33);
     mysql> insert into  db3.user(name,uid) values("bobai", 33);
     mysql> insert into  db3.user(name,uid) values("bobaf", 33);
     mysql> insert into  db3.user(name,uid) values("bobaf", 33);
     mysql> show master status;

51]#  mysql> use  db3;  delete from db3.user;

50]# scp  /root/db3_user.sql root@192.168.4.51:/opt/
50]# scp /mylog/db50.000001  root@192.168.4.51:/opt/

51]# mysql  -uroot -p密码  db3  < /opt/db3_user.sql
51]# mysqlbinlog  /opt/db50.000001 | mysql  -uroot -p密码
51]# mysql> select  count(*) from db3.user;



50~]# mysql> insert into db3.user(name,uid,gid)values("A",33,33);
50~]# mysql> insert into db3.user(name,uid,gid)values("B",33,33);
50~]# mysql> insert into db3.user(name,uid,gid)values("C",33,33);
50~]# mysql> insert into db3.user(name,uid,gid)values("D",33,33);
50~]# mysql> delete from db3.user where name = "A";
50~]# mysql> delete from db3.user where name in ( "B","C");

50~]#scp  /mylog/db50.000001  root@192.168.4.51:/tmp/

51 ~]# mysqlbinlog /tmp/db50.000001

51 ~]# mysqlbinlog   --start-position=1604    --stop-position=2733 /tmp/db50.000001  | mysql -uroot -pA...qqq321


51 ~]# mysql -uroot -pA...qqq321 -e 'select name from db3.user'


+++++50主机 使用本机的binlog日志文件恢复 删除的记录A B C 

50~]# mysqlbinlog /mylog/db50.000001

50~]# mysqlbinlog  --start-position=1604   --stop-position=2408 /mylog/db50.000001 | mysql -uroot -pA...qqq321

50~ ]# mysql -uroot -pA...qqq321 -e 'select name from db3.user'
+++++RDBMS1_DAY05 --使用percona软件提供的命令对数据做
	1 percona软件介绍
	2 安装软件
	3 innobackupex命令常用选项
	4 准备实验环境
	    1 删除自定义的所有库只留下默认的4个可库
	create database db5;
	create table db5.a(id int)engine=innodb;
	create table db5.b(name char(10) )engine=innodb;
	分别向a 和b 表里插入多条记录

完全备份与恢复
   50 完全备份
]# innobackupex --user 用户  --password 密码  目录名 --no-timestamp


      ]# innobackupex  --user root  --password A...qqq321  /allbak  --no-timestamp
      ]# scp  -r /allbak  root@192.168.4.51:/root/
   51 完全恢复
	准备恢复数据
	]# innobackupex  --apply-log  目录名
	拷贝数据到数据库目录下
	]# innobackupex  --copy-back  目录名
	修改数据库目录的所有者和组用户为mysql
	]# chown -R mysql:mysql /var/lib/mysql


	]# cat /root/allbak/xtrabackup_checkpoints
	]# systemctl stop  mysqld
	]# rm  -rf /var/lib/mysql/*
	]# innobackupex --apply-log  /root/allbak
	]# innobackupex --copy-back  /root/allbak
	]# chown -R mysql:mysql /var/lib/mysql
	]# systemctl start  mysqld
	]# mysql -uroot -p密码 
	mysql> use db5;
	mysql> select  * from a ;  select  * from b;

使用完全备份文件恢复1张表的所有数据 192.168.4.51
192.168.4.51 > delete from db5.b;
	     > select  * from db5.b;

	表空间:用来存放表记录的文件 表名.ibd

	1 删除表空间
 alter  table  库名.表名  discard  tablespace; 
 mysql> alter  table  db5.b  discard  tablespace;

	2 导出表信息
 ]# innobackupex --apply-log --export /root/allbak

	3 拷贝表信息文件到数据库目录下
]# cp /root/allbak/db5/b.{cfg,exp,ibd} /var/lib/mysql/db5/

	4 修改表信息文件的所有者及组用户为mysql
]# chown mysql:mysql  /var/lib/mysql/db5/b.*

	5 导入表空间
mysql> alter  table  db5.b  import  tablespace;

	6 删除数据库目录下的表信息文件
]# rm  -rf /var/lib/mysql/db5/b.cfg
]# rm  -rf /var/lib/mysql/db5/b.exp

	7 查看表记录
mysql> select  * from  db5.b;

增量备份与恢复 
      备份 192.168.4.50
周一 完全备份 /allbak

向db5库表中插入新记录后做增量备份

周二 增量备份 /newdir1
]# innobackupex --user root  --password 123456 --incremental /newdir1 --incremental-basedir=/allbak --no-timestamp

]# ls /newdir1


向db5库表中插入新记录后做增量备份
周三 

nnobackupex --user root  --password 123456 --incremental /newdir2  --incremental-basedir=/newdir1  --no-timestamp

]# scp  -r /allbak  root@192.168.4.52:/opt/
]# scp  -r /newdir1  root@192.168.4.52:/opt/
]# scp  -r /newdir2  root@192.168.4.52:/opt/
 
      增量恢复 192.168.4.52
]# innobackupex --apply-log  --redo-only /opt/allbak/
]# innobackupex --apply-log  --redo-only /opt/allbak --incremental-dir=/opt/newdir1

]# innobackupex --apply-log  --redo-only /opt/allbak --incremental-dir=/opt/newdir2 

]# innobackupex  --copy-back /opt/allbak/
]# chown  -R mysql:mysql /var/lib/mysql
]# systemctl  start mysqld
]# mysql -uroot -p123456
mysql> show databases;
  休息 + 练习 到  11：30 

差异备份与恢复
周一 完全备份
]# innobackupex --user root  --password  /allbak  --no-timestamp
插入新记录


周二 差异备份
]# innobackupex --user root  --password  --incremental  /dir1   --incremental-basedir=/allbak
插入新记录

周三 差异备份

]# innobackupex --user root  --password  --incremental  /dir2  --incremental
-basedir=/allbak
插入新记录

周四 差异备份
]# innobackupex --user root  --password  --incremental  /dir3 --incremental
-basedir=/allbak

++++RDBMS1 （数据库基础） 总结
一 搭建mysql数据库服务器 
二 数据管理（insert  delete update  select）
三 用户授权与撤销权限和删除用户
四 数据备份与恢复
	备份策略 完全备份 增量备份  差异备份
        命令     mysqldump  cp tar  innobackupex  binlog日志
50-  55
++++++2019/11/13_RDBMS2
day01
一 、主从同步
	配置主服务器步骤
		1 启用binlog日志文件
		2 用户授权
		3 查看binlog日志信息

	配置从服务器
		1  指定server_id
		2  确保数据一致
		3  指定主服务器信息
		4  启动slave 程序
		5  查看状态

       测试配置：写在主服务器的数据，从服务器也会有
		1 主服务器数据库管理员本机登陆写数据
		2 主服务器添加授权用户，客户端连接登陆写数据


二、主从同步模式
	2.1 结构模式
		一主一从
		一主多从 （把主机53 也配置为51的从服务器）
	
		主从从  53 主---> 54 从  ---->55从

			53主： 启用binlog日志 、 用户授权 、 查看日志信息

			54主/从 启用binlog日志 、 用户授权 、 查看日志信息
				指定主服务器信息  启动slave程序 查看状态

			55从 指定server_id  指定主服务器信息  
                             启动slave程序 查看状态

		互为主从(主主结构) 把数据库服务器56和57配置为主主结构

		 1 克隆2台新虚拟机 配置ip地址 为 192.168.4.56 和 57
		 2 分别在2台主机上安装mysql服务软件，并启动mysql服务
		 3 使用初始密码的登陆 并设置登陆密码123qqq...A
	         4 配置主主结构
	    配置主机56: 启用binlog日志 、 用户授权 、 查看日志信息	
	    配置主机57: 启用binlog日志 、 用户授权 、 查看日志信息

	    配置主机56 指定主服务器为57
	    配置主机57 指定主服务器为56

	    测试配置：客户端50 分别连接56 和 57 存取数据。

	2.2 复制模式 (主从服务器之间同步数据的方式)
		异步模式（默认）
		全同步模式
		半同步模式

		修改数据同步模式为 半同步模式
		修改主服务器  53
		命令行配置
		    安装模块 install  plugin 
		   mysql> install  plugin  rpl_semi_sync_master SONAME "semisync_master.so";

	         mysql> select  plugin_name, plugin_status from  information_schema.plugins  where plugin_name like '%semi%';
			
		   启用模块 set  global 
			mysql> set  global rpl_semi_sync_master_enabled=1;
			mysql> show  variables  like  "rpl_semi_sync_%_enabled";

		永久配置
		vim /etc/my.cnf
		[mysqld]
plugin-load=rpl_semi_sync_master=semisync_master.so
rpl_semi_sync_master_enabled=1
:wq
	

		  54（主/从）
mysql>install  plugin  rpl_semi_sync_master SONAME "semisync_master.so";
mysql>install  plugin  rpl_semi_sync_slave SONAME "semisync_slave.so";


mysql> set  global rpl_semi_sync_slave_enabled=1;
mysql> set  global rpl_semi_sync_master_enabled=1;



]# vim /etc/my.cnf
[mysqld]
plugin-load = "rpl_semi_sync_master=semisync_master.so;rpl_semi_sync_slave=semisync_slave.so"
rpl_semi_sync_master_enabled=1
rpl_semi_sync_slave_enabled=1
:wq		


		
		  修改从服务器  55
		  mysql>  install  plugin  rpl_semi_sync_slave
                          SONAME  "semisync_slave.so";
		  
		 ]# vim /etc/my.cnf
		 [mysqld]
		  [mysqld]
plugin-load=rpl_semi_sync_slave=semisync_slave.so
rpl_semi_sync_slave_enabled=1
:wq

+++++RDBMS_DAY01
一、数据读写分离
	1.1 什么是 数据读写分离
	  把客户端访问时的查询请求sql命令 和写请求sql命令 分别给不同的数据库服务器处理。

	1.2 为什么配置数据读写分离
	1.4 配置数据读写分离
		1.4.1 装包
			
		1.4.2 修改配置文件
			[maxscale]服务运行后线程数量
			[server数字] 指定数据库服务器
			[MySQL Monitor] 指定被监视的数据库服务器
			[Read-Write Service]定义读写分离使用的主机
			[MaxAdmin Service] 定义管理服务
			[Read-Write Listener]定义读写分离服务使用的端口
			[MaxAdmin Listener] 定义管理服务使用的端口
			
		
		        在数据库服务器上添加对应的授权用户
		
			 监控用户 maxscalemon
grant replication slave, replication client on *.* to maxscalemon@"%" identified by "123qqq...A";


			 路由用户 maxscalerouter
grant select  on  mysql.*  to  maxscalerouter@"%" identified by "123qqq...A";

			 查看授权用户
			 select user ,host  from mysql.user;

		1.4.3 启动服务 192.168.4.57
			]# maxscale  -f  /etc/maxscale.cnf
			]# netstat  -utnlp  | grep  maxscale
			]# ls /var/log/maxscale/maxscale.log

		      停止服务的命令 killall  -9  maxscale
	1.5 测试配置
		1.5.1 在57 本机访问管理服务查看监控状态
		[root@host57 ~]# maxadmin  -uadmin  -pmariadb -P4016
		MaxScale> list servers

		1.5.2 客户端连接57 主机访问数据
			1. 在主数据库服务器51 添加访问数据的连接用户
			mysql> grant select , insert on db6.*  to  jim@"%" identified by "123qqq...A"；
		
			2.   50连接57 主机访问数据
]# mysql -h192.168.4.57 -P4006  -ujim  -p123qqq...A
> select  * from  db6.t1;
> insert into db6.t1 values(1111);

			3 验证读写分离功能
			   1、 在主服务器51 使用root 用户把表记录清空
				delete from db6.t1;

			   2 、在从服务器52  使用root 用户插入1条记录
				insert into db6.t1 values(5252);

			   3 、在客户端50 连接 57 可以查看到数据
			]# mysql -h192.168.4.57 -P4006 -ujim -p123qqq...A 
                        > select  * from db6.t1; 可以查到记录
			> insert into  db6.t1 values(888); 写1条新记录

			   4 在主服务器51 使用root 用户查看记录
		            > select  * from db6.t1; 查看到新记录888
				

			   5 在客户端50 连接 57 可以查看到数据
			]# mysql -h192.168.4.57 -P4006 -ujim -p123qqq...A
                        > select  * from db6.t1; 可以查到2条记录

二、MySQL多实例
   克隆1台新虚拟机 配置ip 地址  192.168.4.58 在主机58上部署mysql多实例
	1 安装软件
	2 环境配置
	3 编写主配置
	4 启动服务
		1  创建存储数据的目录
		2  启动服务
		   ]# mysqld_multi start  1
		   ]# ls  /dir1   查看数据库目录文件列表

		3  使用root管理员初始密码登陆
		   ]# mysql -uroot  -p'sB?ihq(DO7.f' -S /dir1/mysqld1.sock
		
                4  强制修改登陆密码
		   > alter user  root@"localhost" identified by "123456";
		   > show databases;
		   > exit
		5 使用修改后的密码登陆
		   ]# mysql -uroot  -p123456 -S /dir1/mysqld1.sock
		  mysql>exit;

		6 查端口
		  ]# netstat -utnlp  | grep  mysqld

		7 停止服务

		]# mysqld_multi  --user=root --password=123456  stop 1

		启动实例2 
		48  mysqld_multi  start 2 
   		49  ls /dir2
   		50  mysql -uroot -p'tUhuAN8z=ph(' -S /dir2/mysqld2.sock
   		51  mysql -uroot -p123456 -S /dir2/mysqld2.sock
		     > alter user root@"localhost" identified by "123456";
   		52  netstat  -utnlp  | grep  mysqld
   		53  mysqld_multi  --user=root --password=123456 stop 2
   		54  netstat  -utnlp  | grep  mysqld

		启动2个实例服务 
[root@host58 ~]# mysqld_multi  start 1
[root@host58 ~]# 
[root@host58 ~]# mysqld_multi  start 2
[root@host58 ~]# 
[root@host58 ~]# netstat -utnlp  | grep mysqld
tcp6       0      0 :::3307                 :::*                    LISTEN      23840/mysqld        
tcp6       0      0 :::3308                 :::*                    LISTEN      24000/mysqld        
[root@host58 ~]#

	排错时间到 17：10 	
	
	扩展，做如下配置：
	1 在58主机运行实例 mysqld3 服务

	]# vim /etc/my.cnf
	[mysqld3]
	datadir=/dir3
	port=3309
	pid-file=/dir3/mysqld3.pid
	log-error=/dir3/mysqld3.err
	socket = /dir3/mysqld3.sock
	:wq
       mkdir /dir3
   64  mysqld_multi  start 3
   65  ls /dir3
   66  mysql -uroot -p'6&;uE?+H:3_a' -S /dir3/mysqld3.sock
        > alter user root@"localhost" identified  by "123456";
	> exit
   67  mysql -uroot -p123456 -S /dir3/mysqld3.sock

	休息到 17：30

	2 配置58 主机 允许客户50 访问 实例2服务 并启用实例2服务的binlog日志
host58 ~]# mysql -uroot  -p123456 -S /dir2/mysqld2.sock
      mysql> grant all on gamedb.*  to admin@"%" identified by "123456";
      mysql> select host , user from mysql.user;
      mysql> exit

host58 ~]# vim /etc/my.cnf
              [mysqld2]
               server_id=2
               log_bin=plj
           :wq
[root@host58 ~]# mysqld_multi  --user=root  --password=123456 stop  2
[root@host58 ~]# mysqld_multi start 2
[root@host58 ~]# mysql -uroot  -p123456 -S /dir2/mysqld2.sock
                 mysql> show master status;

host50 ~]# mysql  -h192.168.4.58 -P3308  -uadmin -p123456
> show grants;
mysql> create database gamedb;
Query OK, 1 row affected (0.03 sec)

mysql> create table gamedb.user(name char(10));
Query OK, 0 rows affected (0.50 sec)

mysql> insert into gamedb.user values("jim");
Query OK, 1 row affected (0.06 sec)

mysql> select  * from  gamedb.user;

+++++RDBMS2_DAY03----- 数据分片
4 mysql集群
5 存储引擎
