ip  172.40.50.117  
vnc 7000

庞丽静
邮箱 panglj@tedu.cn  中心名-nsd1908-姓名
		      
		      

ftp://172.40.50.117/nsd1908/all_note.txt
软件 真机/linux-soft/03/
第3阶段课程内容
			RDBMS1  数据库基础 day05
			RDBMS2  数据库进阶
					   mysql

			NoSQL   非关系型数据库 redis

			securiyt 安全与监控     Zabbix

工作岗位：数据库管理员  DBA  linux运维 IDC


不迟到 不早退 ，  认真听讲 专心做实验 

重要的命令  例子步骤   all_note.txt 文件

++++++RDBMS1_DAY01
一 、相关概念
二、 搭建数据库服务器 
三、数据库服务基本使用
	3.1 连接数据服务器的方式 
		mysql -h数据库服务器ip  -u用户  -p密码 
	3.2 把数据存储到服务的流程
		建立连接
		建库
		建表
		插入记录
		断开连接
	3.3 sql命令 使用规则 
	3.4 库管理命令
	3.5 表管理命令
mysql> create database db1;
mysql> create table  db1.sutinfo(name char(15) , homedir char(20), class char(7) );

mysql> use db1;
mysql> show tables;

mysql> desc sutinfo;
mysql> select  * from sutinfo;

	3.6 表记录管理
		插入表记录
mysql> insert into  db1.sutinfo  values ("bob","usa","nsd1908"),("lilei" , "china" ,"nsd1907");

		查看表记录
select  *  from db1.sutinfo;

		修改字段值（表头的值）
mysql> update db1.sutinfo set homedir="beijing" ;
mysql> update db1.sutinfo set homedir="shanghai" where name="lilei";

		删除表记录
mysql> delete  from  db1.sutionfo;
mysql> show tables;
mysql> drop  table sutinfo;

mysql> use db1;

mysql> create table 学生表(姓名 char(10) , 地址  char(100) )DEFAULT CHARSET=utf8 ;


mysql> show create table 学生表;


mysql> insert into  学生表 values ("张三丰","武当山");

mysql> select  * from  学生表;

四、数据类型
	4.1 字符类型 char / varchar  /text  / blob

mysql> create table t3 (name char(5) ,mail varchar(50));
mysql> desc  t3;
mysql> insert into db1.t3 values ("jerry","jerry@163.com" );

mysql> insert into db1.t3 values ("jerrya","jerry@163.com" );
ERROR 1406 (22001): Data too long for column 'name' at row 1

mysql> insert into db1.t3 values ("jim","jerry@163.com" );
mysql> select  * from db1.t3;

mysql> desc mysql.user;

	4.2 数值类型
create table db1.t2(stu_num  int , name  char(5) , 
age tinyint unsigned , pay float , money float(5,2) );

mysql> desc db1.t2;

mysql> desc mysql.user;
mysql> insert into db1.t2 values (3,"bob",19 ,22222,999.99);
mysql> insert into db1.t2 values (1,"tom",19.5 ,22222,88);
mysql> insert into db1.t2 values (1,"jerry",19.5 ,22222,1.25);
mysql> select  * from db1.t2;

	4.3 日期时间类型

mysql> create table db1.t4( name char(5) , your_start year , up_time time ,birthday  date  , party datetime);

mysql> desc  db1.t4;

mysql> insert into  db1.t4 values ("bob" , 1990 ,083000 ,20191120 ,20191224203000);

mysql>  select  *  from db1.t4 ;

ql> insert into  db1.t4 values ("tom" , 1990 ,curtime() ,20191120 ,now());

mysql> select  * from  db1.t4; 

mysql> select now();
mysql> select month( now() );
mysql> select  year( now() );

	4.4 枚举类型（给字段赋值时 值值能在类型列举的范围内选择）
		enum(值1，值2, 值3 ) 单选
		set(值1，值2, 值3 ) 多选


mysql> create table t5(name char(5) ,sex  enum("boy","girl","no") );

mysql> desc t5;

mysql> insert into  t5 values ( "john" ,"man" ) ;
ERROR 1265 (01000): Data truncated for column 'sex' at row 1

mysql> 
mysql> insert into  t5 values ( "john" ,"boy" ) ;

mysql> create  table  t6 ( name  char(5), likes set("eat","sleep","game","drink") );


mysql> desc t6;

mysql> insert into  t6 values ("jerry","eat,sleep,drink");

mysql> insert into  t6 values ("lucy","eat,sleep,money");
ERROR 1265 (01000): Data truncated for column 'likes' at row 1

字符类型   数值类型  日期时间类型  枚举类型

日期时间类型 year   datetime / timestamp
             xxxx

当使用2位数给year类型字段赋值遵循如下规律：
01~69视为  2001~2069
70~99视为  1970~1999

mysql> select  your_start from t4;
mysql> insert into  t4(your_start)values (58),(88);
mysql> select  your_start from t4;


datetime / timestamp 的 区别：
当未给timestamp字段赋值时，自动以当前系统时间赋值，而datetime 值为 NULL (空)

mysql> create table  t7 ( party  datetime , meetting  timestamp  );
mysql> insert into t7  values (20191107091328 , 20191224203000);
mysql> insert into  t7(party) value(20171225214548);
mysql> insert into  t7(meeting) value(20151225214548);
mysql> select  * from t7;


课后练习
1 创建 before_pop (前任信息) 自己定义表结构 


2 搭建3台数据库服务器
192.168.4.51 
192.168.4.52 
192.168.4.53
 
+++++++RDBMS1_DAY02
一、表结构
	2.1 约束条件
mysql> use db1;
mysql> create table  t77 ( name  char(10) not null ,
    -> age  tinyint unsigned  default 19,
    -> class char(7) not null default "nsd1908",
    -> up_time time
    -> );

mysql> desc  t77;

mysql> insert into t77(name,up_time) values("john",083000);
mysql> insert into t77 values ("null" , 21 , "null" , null);
	
	2.2 修改表结构
mysql> alter table  db1.t6  
       add mail varchar(50) default  "stu@tedu.cn",
       add sex  enum("m","w") default "m";
	
mysql> alter table  db1.t6 
       add age  int  after name , add stu_num char(9) first;


mysql> alter table   db1.t6 modify  stu_num varchar(9);

mysql> alter table  db1.t6  modify age int after likes;
	
mysql> alter table   db1.t6 
       change sex 性别 enum('m','w') not null default "m" ;

mysql> alter table  db1.t6 drop likes , drop mail;

mysql> alter table  t6 rename  信息表;




二、mysql键值 
	2.1 普通索引 index
		1 什么是索引
		2 索引优点与缺点
		3 为什么要使用索引
		4 使用索引
			查看
			创建： 已有表里创建/建表是创建
			删除
		5 索引使用规则?

  	2.2 主键 primary key
		1 使用规则

		字段值不允许重复，且不允许赋NULL值
	      一个表中只能有一个primary  key字段
               多个字段都作为主键，称为复合主键，必须一起创建。
		通常与 auto_increment 连用,让字段使用自增长方式赋值 
 		主键字段的标志是PRI             
		
		2 创建主键
mysql> use db2;

mysql> create table  t2 (
    -> name char(10) primary key, class char(9) );

mysql> create table  t3 ( 
      name char(10) , class char(9) , primary key(name) );

		3 添加主键
mysql> delete from db1.t4;
mysql> alter table db1.t4  add  primary key(name);
mysql> desc db1.t4;
mysql> insert into db1.t4(name) values(null);
mysql> insert into db1.t4(name) values("null");
mysql> insert into db1.t4(name) values("bob");
mysql> insert into db1.t4(name) values("bob");
mysql> insert into db1.t4(name) values("bob22");
	
		4 删除主键
mysql> alter table db1.t4  drop  primary key	
mysql> insert into db1.t4(name) values("bob22");

		5复合主键(多个字段一起做主键,字段的值不同时重复就可以)，必须一起创建。
	
mysql> create table t4 ( cip char(15) , sername char(20) , serport smallint , status enum("yes","no") ,primary key ( cip , serport ) ) ;

mysql> desc t4;

insert into t4 values ("1.1.1.1" , "ssh" , 22 , "yes") ;
insert into t4 values ("2.1.1.1" , "ssh" , 22 , "yes") ;
insert into t4 values ("2.1.1.1" , "ftp" , 21 , "no") ;

mysql> alter  table  t4 drop primary key ;

mysql> desc  t4;

		6 主键通常与 auto_increment 连用,实现字段的自增长赋值


mysql> create table  t5 ( id  int  primary key  auto_increment  , name char(10) , age  tinyint );


mysql> insert into  t5 (name , age ) values ("bob",21);
mysql> insert into  t5 (name , age ) values ("jim",17);
	2.3 外键 foreign key

mysql> create table  yg(
      yg_id int primary key auto_increment ,
      name char(10)
      )engine=innodb;

mysql> insert into yg(name) values("jerry");
mysql> insert into yg(name) values("tom");
mysql> insert into yg(name) values("tom");
mysql> select  * from yg;

mysql> create table  gz ( 
       gz_id  int  , 
       gz int , 
       foreign key(gz_id) references yg(yg_id) 
       on update cascade  on delete cascade
       )engine=innodb ;

    mysql> show create table gz\G;

mysql> alter table  gz drop foreign key gz_ibfk_1 ;

mysql> alter table  gz 
    -> add
    -> foreign key(gz_id) references yg(yg_id)
    -> on update cascade on delete cascade ;


mysql> insert into gz values (1,30000);
mysql> insert into gz values (2,40000);
mysql> insert into gz values (3,45000);

ql> insert into gz values (4,50000);
ERROR 1452 (23000): Cannot add or update a child row: a foreign key constraint fails (`db2`.`gz`, CONSTRAINT `gz_ibfk_1` FOREIGN KEY (`gz_id`) REFERENCES `yg` (`yg_id`) ON DELETE CASCADE ON UPDATE CASCADE)
mysql>

mysql> update yg set yg_id=11 where yg_id=1;
mysql> delete from  yg where yg_id=4;
mysql> select  * from yg;
mysql> select  * from gz;

mysql> alter table  gz add primary key (gz_id);


+++++++++RDBMS1_DAY03 
一 数据导入导出
	1.1 检索目录:文件存放的目录
		查看目录
		自定义

	1.2 数据导入 ： 把系统文件的内容存储到库的表里

	1.3 数据导出:把表记录存储到系统文件里
		
		

二、管理表记录
	2.1 插入表记录
insert into  db3.user  values (22,"bob","x",2019,2019,"test user","/home/bob","/bin/bash");

insert into  db3.user  
values 
(23,"bob2","x",2039,2019,"test user","/home/bob2","/bin/bash"),(24,"bob3","x",2029,2019,"test user","/home/bob3","/bin/bash");

mysql> insert into  db3.user (name, uid ) 
       values ("jerry",2069;)

mysql> insert into  db3.user (name, uid ) 
       values ("tom",2039),("lucy",2089);

       2.2 查询表记录 select  
select  字段1, .. .., 字段N  from  库名.表名 [ where   条件表达式 ] ; 

select  * from  db3.user;

select  id , name , shell  from  db3.user ;

select  id , name , shell  from  db3.user where id <= 3 ; 

        2.3 更新表记录
update   库名.表名  set  字段名=值,字段名=值,字段名=值[  where    条件表达式] ;
mysql> update  user set password="x" , coment="root" where name="root";

update   库名.表名  set  字段名=值,字段名=值,字段名=值;
mysql> update  user set password="a" , coment="stu" ;

	删除表记录
	delete from  库名.表名;
	delete from  库名.表名 where 条件表达式;
	mysql> select  * from  user where  id >=22 ;

三、匹配条件 
	3.1 基本匹配条件 select / update  /delete
		1 数值比较
mysql> select  name , uid ,gid from user   where  uid = gid ;

mysql> select  name , uid ,gid from user  where uid != gid;

mysql> select  name , uid ,gid from user  where uid = 3;

		2 字符比较/匹配空/非空
mysql> select name from user where name =  "apache" ;

mysql> select name from user where name =  "mysql" ;

mysql> select name , shell from user  where shell !=  "/bin/bash";

mysql> select name , shell from user  where shell =  "/bin/bash";

mysql> insert into  user(id , name )values(22,null);

mysql> select id ,  name from user where name is null;
mysql> select id ,  name from user where name is not null;

		3  逻辑匹配
mysql> select  * from user 
       where uid = 0  and  name="root" and shell = "/bin/bash";

mysql> select  * from user 
        where uid < 3  or  shell != "/bin/bash" ;

		4 范围匹配/去重显示
mysql> select name from user 
    -> where name  in  ("sync","bin","http","root") ;

mysql> select name , shell  from user  where shell not in ("/bin/bash" ,"/sbin/nologin" );
		
mysql> select  *  from user  where  id  between 5 and 10;

mysql> select  distinct   shell  from  user 
       where shell="/sbin/nologin";

mysql> select  shell  from  user;
mysql> select  distinct   shell  from  user;

mysql> update user set password="f"  where id >= 2 and id <=5 ;
或
mysql> update user set password="f" where  id between 2 and 5;

	3.2 高级匹配条件
		1 模糊查询 like
		where  字段 like ‘’；
		_      表示1个字符
		%     表示0~n个字符
mysql> select name from user where name like '____';
mysql> select name from user where name like '%a%';
mysql> select name from user where name like '_%_';
mysql> select name from user where name like 'r%t';
mysql> select name from user where name like 'a%';
mysql> select name ,uid from user where uid like '___';
		2 正则匹配 where 字段名  regexp   '正则表达式’
                           正则元字符   ^   $   .   [ ]   *    | 
mysql> select name ,uid   from user  where uid regexp '^..$';
mysql> select name ,uid   from user  
           where name regexp '^[abc]';
mysql> insert into  db3.user(name)
       values("ya2ya"),("yaya9"),("bab4y");
mysql> select name ,uid   from user  
       where name regexp '[0-9]';
		3 四则运算 + - * /  %
mysql> update user set uid=uid+1 where id <= 5;
mysql> select id , name , uid from user where id <= 5;
mysql> alter table user add age tinyint default 19 after name;
mysql> select name , age , 2019 - age csnf from user 
       where name="root";
mysql> select name , uid , gid , uid+gid zcj , (uid+gid)/2 pjf from user where  name="mysql";
mysql> select  name , uid from user where uid % 2 = 0;
mysql> select  name , uid from user where uid % 2 != 0;
	3.3 操作查询结果 
		1 排序 order by  字段名  排序方式asc /desc
mysql> select  name,uid from user where  uid between 10 and 100       order by uid  desc;

mysql> select  name,uid from user where  uid between 10 and 100       order by uid  ;

		2 分组  group by  字段名
mysql> select  gid  from  user where id <= 20  group by gid;
mysql> select  shell  from  user where id <= 20  group by shell;
		3 限制显示行 个数
mysql> select id,name,shell from user where id <=10 limit 1;
mysql> select id,name,shell from user where id <=10 limit 3;

mysql> select id ,  name  , shell  from user 
        where id <=10   limit 3,5;

mysql> select id ,  name  , shell  from user 
        where id <=10   limit 1,5;

		4 查询结果过滤 having 条件
		 mysql> select name from  user where shell != "/bin/bash"  having name="mysql";

		5 聚集函数 :对数据做统计的内置命令
mysql> select sum(uid)  from user;
mysql> select avg(uid)  from user;	
mysql> select max(uid) from user ;
mysql> select min(uid) from user ;
mysql> select count(name) from user where uid <=10 ;
mysql> select  count(*) from user;

四、MySQL管理工具（phpmyadmin）
